/* tslint:disable */
/* eslint-disable */
/**
 * order Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrderAddDocumentRequest,
  OrderApproveOrderRequest,
  OrderAssignShipmentRequest,
  OrderCalculateRefundRequest,
  OrderCalculateRefundResponse,
  OrderCancelFulfillmentRequest,
  OrderCancelOrderRequest,
  OrderCancelShipmentRequest,
  OrderCompleteShipmentPackingRequest,
  OrderCreateFulfillmentRequest,
  OrderCreateHistoryRequest,
  OrderCreateOrderRequest,
  OrderCreatePaymentRequest,
  OrderCreatePaymentTransactionRequest,
  OrderCreateRefundRequest,
  OrderCreateRefundTransactionRequest,
  OrderCreateShipmentRequest,
  OrderDataHistory,
  OrderDeleteOrderRequest,
  OrderFulfillment,
  OrderGetFulfillmentRequest,
  OrderGetOrderByCartIdRequest,
  OrderGetOrderByOrderNumberRequest,
  OrderGetOrderRequest,
  OrderGetPaymentRequest,
  OrderGetShipmentRequest,
  OrderGetTransactionRequest,
  OrderHoldOrderRequest,
  OrderImportOrderRequest,
  OrderListFulfillmentsRequest,
  OrderListFulfillmentsResponse,
  OrderListOrdersByCustomerRequest,
  OrderListOrdersByCustomerResponse,
  OrderListOrdersByNumbersRequest,
  OrderListOrdersByNumbersResponse,
  OrderListOrdersRequest,
  OrderListOrdersResponse,
  OrderListShipmentsRequest,
  OrderListShipmentsResponse,
  OrderOrderData,
  OrderPayment,
  OrderPrintOrdersLabelsRequest,
  OrderPrintOrdersLabelsResponse,
  OrderQuashFulfillmentRequest,
  OrderQuashShipmentRequest,
  OrderReceiveFulfillmentRequest,
  OrderRefund,
  OrderRemoveDocumentByCodeRequest,
  OrderReportFulfillmentErrorRequest,
  OrderReportFulfillmentNotResolvableRequest,
  OrderReportFulfillmentReadyRequest,
  OrderReportShipmentDeliveryRequest,
  OrderReportShipmentMissingStockRequest,
  OrderResolveShipmentMissingStockRequest,
  OrderRetryFulfillmentRequest,
  OrderSearchOrdersRequest,
  OrderSearchOrdersResponse,
  OrderSendFulfillmentRequest,
  OrderSendOrderNotificationRequest,
  OrderShipment,
  OrderStartFulfillmentProcessingRequest,
  OrderStartShipmentProcessingRequest,
  OrderTransaction,
  OrderUnholdOrderRequest,
  OrderUpdateOrderRequest,
  OrderUpdatePaymentRequest,
  RpcStatus,
} from '../models/index';
import {
    OrderAddDocumentRequestFromJSON,
    OrderAddDocumentRequestToJSON,
    OrderApproveOrderRequestFromJSON,
    OrderApproveOrderRequestToJSON,
    OrderAssignShipmentRequestFromJSON,
    OrderAssignShipmentRequestToJSON,
    OrderCalculateRefundRequestFromJSON,
    OrderCalculateRefundRequestToJSON,
    OrderCalculateRefundResponseFromJSON,
    OrderCalculateRefundResponseToJSON,
    OrderCancelFulfillmentRequestFromJSON,
    OrderCancelFulfillmentRequestToJSON,
    OrderCancelOrderRequestFromJSON,
    OrderCancelOrderRequestToJSON,
    OrderCancelShipmentRequestFromJSON,
    OrderCancelShipmentRequestToJSON,
    OrderCompleteShipmentPackingRequestFromJSON,
    OrderCompleteShipmentPackingRequestToJSON,
    OrderCreateFulfillmentRequestFromJSON,
    OrderCreateFulfillmentRequestToJSON,
    OrderCreateHistoryRequestFromJSON,
    OrderCreateHistoryRequestToJSON,
    OrderCreateOrderRequestFromJSON,
    OrderCreateOrderRequestToJSON,
    OrderCreatePaymentRequestFromJSON,
    OrderCreatePaymentRequestToJSON,
    OrderCreatePaymentTransactionRequestFromJSON,
    OrderCreatePaymentTransactionRequestToJSON,
    OrderCreateRefundRequestFromJSON,
    OrderCreateRefundRequestToJSON,
    OrderCreateRefundTransactionRequestFromJSON,
    OrderCreateRefundTransactionRequestToJSON,
    OrderCreateShipmentRequestFromJSON,
    OrderCreateShipmentRequestToJSON,
    OrderDataHistoryFromJSON,
    OrderDataHistoryToJSON,
    OrderDeleteOrderRequestFromJSON,
    OrderDeleteOrderRequestToJSON,
    OrderFulfillmentFromJSON,
    OrderFulfillmentToJSON,
    OrderGetFulfillmentRequestFromJSON,
    OrderGetFulfillmentRequestToJSON,
    OrderGetOrderByCartIdRequestFromJSON,
    OrderGetOrderByCartIdRequestToJSON,
    OrderGetOrderByOrderNumberRequestFromJSON,
    OrderGetOrderByOrderNumberRequestToJSON,
    OrderGetOrderRequestFromJSON,
    OrderGetOrderRequestToJSON,
    OrderGetPaymentRequestFromJSON,
    OrderGetPaymentRequestToJSON,
    OrderGetShipmentRequestFromJSON,
    OrderGetShipmentRequestToJSON,
    OrderGetTransactionRequestFromJSON,
    OrderGetTransactionRequestToJSON,
    OrderHoldOrderRequestFromJSON,
    OrderHoldOrderRequestToJSON,
    OrderImportOrderRequestFromJSON,
    OrderImportOrderRequestToJSON,
    OrderListFulfillmentsRequestFromJSON,
    OrderListFulfillmentsRequestToJSON,
    OrderListFulfillmentsResponseFromJSON,
    OrderListFulfillmentsResponseToJSON,
    OrderListOrdersByCustomerRequestFromJSON,
    OrderListOrdersByCustomerRequestToJSON,
    OrderListOrdersByCustomerResponseFromJSON,
    OrderListOrdersByCustomerResponseToJSON,
    OrderListOrdersByNumbersRequestFromJSON,
    OrderListOrdersByNumbersRequestToJSON,
    OrderListOrdersByNumbersResponseFromJSON,
    OrderListOrdersByNumbersResponseToJSON,
    OrderListOrdersRequestFromJSON,
    OrderListOrdersRequestToJSON,
    OrderListOrdersResponseFromJSON,
    OrderListOrdersResponseToJSON,
    OrderListShipmentsRequestFromJSON,
    OrderListShipmentsRequestToJSON,
    OrderListShipmentsResponseFromJSON,
    OrderListShipmentsResponseToJSON,
    OrderOrderDataFromJSON,
    OrderOrderDataToJSON,
    OrderPaymentFromJSON,
    OrderPaymentToJSON,
    OrderPrintOrdersLabelsRequestFromJSON,
    OrderPrintOrdersLabelsRequestToJSON,
    OrderPrintOrdersLabelsResponseFromJSON,
    OrderPrintOrdersLabelsResponseToJSON,
    OrderQuashFulfillmentRequestFromJSON,
    OrderQuashFulfillmentRequestToJSON,
    OrderQuashShipmentRequestFromJSON,
    OrderQuashShipmentRequestToJSON,
    OrderReceiveFulfillmentRequestFromJSON,
    OrderReceiveFulfillmentRequestToJSON,
    OrderRefundFromJSON,
    OrderRefundToJSON,
    OrderRemoveDocumentByCodeRequestFromJSON,
    OrderRemoveDocumentByCodeRequestToJSON,
    OrderReportFulfillmentErrorRequestFromJSON,
    OrderReportFulfillmentErrorRequestToJSON,
    OrderReportFulfillmentNotResolvableRequestFromJSON,
    OrderReportFulfillmentNotResolvableRequestToJSON,
    OrderReportFulfillmentReadyRequestFromJSON,
    OrderReportFulfillmentReadyRequestToJSON,
    OrderReportShipmentDeliveryRequestFromJSON,
    OrderReportShipmentDeliveryRequestToJSON,
    OrderReportShipmentMissingStockRequestFromJSON,
    OrderReportShipmentMissingStockRequestToJSON,
    OrderResolveShipmentMissingStockRequestFromJSON,
    OrderResolveShipmentMissingStockRequestToJSON,
    OrderRetryFulfillmentRequestFromJSON,
    OrderRetryFulfillmentRequestToJSON,
    OrderSearchOrdersRequestFromJSON,
    OrderSearchOrdersRequestToJSON,
    OrderSearchOrdersResponseFromJSON,
    OrderSearchOrdersResponseToJSON,
    OrderSendFulfillmentRequestFromJSON,
    OrderSendFulfillmentRequestToJSON,
    OrderSendOrderNotificationRequestFromJSON,
    OrderSendOrderNotificationRequestToJSON,
    OrderShipmentFromJSON,
    OrderShipmentToJSON,
    OrderStartFulfillmentProcessingRequestFromJSON,
    OrderStartFulfillmentProcessingRequestToJSON,
    OrderStartShipmentProcessingRequestFromJSON,
    OrderStartShipmentProcessingRequestToJSON,
    OrderTransactionFromJSON,
    OrderTransactionToJSON,
    OrderUnholdOrderRequestFromJSON,
    OrderUnholdOrderRequestToJSON,
    OrderUpdateOrderRequestFromJSON,
    OrderUpdateOrderRequestToJSON,
    OrderUpdatePaymentRequestFromJSON,
    OrderUpdatePaymentRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface ApproveOrderRequest {
    body: OrderApproveOrderRequest;
}

export interface AssignShipmentRequest {
    body: OrderAssignShipmentRequest;
}

export interface CalculateRefundRequest {
    body: OrderCalculateRefundRequest;
}

export interface CancelFulfillmentRequest {
    body: OrderCancelFulfillmentRequest;
}

export interface CancelOrderRequest {
    body: OrderCancelOrderRequest;
}

export interface CancelShipmentRequest {
    body: OrderCancelShipmentRequest;
}

export interface CompleteShipmentPackingRequest {
    body: OrderCompleteShipmentPackingRequest;
}

export interface CreateFulfillmentRequest {
    body: OrderCreateFulfillmentRequest;
}

export interface CreateOrderRequest {
    body: OrderCreateOrderRequest;
}

export interface CreateOrderHistoryRequest {
    body: OrderCreateHistoryRequest;
}

export interface CreatePaymentRequest {
    body: OrderCreatePaymentRequest;
}

export interface CreatePaymentTransactionRequest {
    body: OrderCreatePaymentTransactionRequest;
}

export interface CreateRefundRequest {
    body: OrderCreateRefundRequest;
}

export interface CreateRefundTransactionRequest {
    body: OrderCreateRefundTransactionRequest;
}

export interface CreateShipmentRequest {
    body: OrderCreateShipmentRequest;
}

export interface DeleteOrderRequest {
    body: OrderDeleteOrderRequest;
}

export interface GetFulfillmentRequest {
    body: OrderGetFulfillmentRequest;
}

export interface GetOrderRequest {
    body: OrderGetOrderRequest;
}

export interface GetOrderByCartIdRequest {
    body: OrderGetOrderByCartIdRequest;
}

export interface GetOrderByOrderNumberRequest {
    body: OrderGetOrderByOrderNumberRequest;
}

export interface GetPaymentRequest {
    body: OrderGetPaymentRequest;
}

export interface GetShipmentRequest {
    body: OrderGetShipmentRequest;
}

export interface GetTransactionRequest {
    body: OrderGetTransactionRequest;
}

export interface HoldOrderRequest {
    body: OrderHoldOrderRequest;
}

export interface ImportOrderRequest {
    body: OrderImportOrderRequest;
}

export interface ListFulfillmentsRequest {
    body: OrderListFulfillmentsRequest;
}

export interface ListOrdersRequest {
    body: OrderListOrdersRequest;
}

export interface ListOrdersByCustomerRequest {
    body: OrderListOrdersByCustomerRequest;
}

export interface ListOrdersByNumbersRequest {
    body: OrderListOrdersByNumbersRequest;
}

export interface ListShipmentsRequest {
    body: OrderListShipmentsRequest;
}

export interface OrderAddDocumentOperationRequest {
    body: OrderAddDocumentRequest;
}

export interface OrderRemoveDocumentByCodeOperationRequest {
    body: OrderRemoveDocumentByCodeRequest;
}

export interface PrintOrdersLabelsRequest {
    body: OrderPrintOrdersLabelsRequest;
}

export interface QuashFulfillmentRequest {
    body: OrderQuashFulfillmentRequest;
}

export interface QuashShipmentRequest {
    body: OrderQuashShipmentRequest;
}

export interface ReceiveFulfillmentRequest {
    body: OrderReceiveFulfillmentRequest;
}

export interface ReportFulfillmentErrorRequest {
    body: OrderReportFulfillmentErrorRequest;
}

export interface ReportFulfillmentNotResolvableRequest {
    body: OrderReportFulfillmentNotResolvableRequest;
}

export interface ReportFulfillmentReadyRequest {
    body: OrderReportFulfillmentReadyRequest;
}

export interface ReportShipmentDeliveryRequest {
    body: OrderReportShipmentDeliveryRequest;
}

export interface ReportShipmentMissingStockRequest {
    body: OrderReportShipmentMissingStockRequest;
}

export interface ResolveShipmentMissingStockRequest {
    body: OrderResolveShipmentMissingStockRequest;
}

export interface RetryFulfillmentRequest {
    body: OrderRetryFulfillmentRequest;
}

export interface SearchOrdersRequest {
    body: OrderSearchOrdersRequest;
}

export interface SendFulfillmentRequest {
    body: OrderSendFulfillmentRequest;
}

export interface SendOrderNotificationRequest {
    body: OrderSendOrderNotificationRequest;
}

export interface StartFulfillmentProcessingRequest {
    body: OrderStartFulfillmentProcessingRequest;
}

export interface StartShipmentProcessingRequest {
    body: OrderStartShipmentProcessingRequest;
}

export interface UnholdOrderRequest {
    body: OrderUnholdOrderRequest;
}

export interface UpdateOrderRequest {
    body: OrderUpdateOrderRequest;
}

export interface UpdatePaymentRequest {
    body: OrderUpdatePaymentRequest;
}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI {

    /**
     * Approve Order
     */
    async approveOrderRaw(requestParameters: ApproveOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling approveOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ApproveOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderApproveOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Approve Order
     */
    async approveOrder(requestParameters: ApproveOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.approveOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign Shipment
     */
    async assignShipmentRaw(requestParameters: AssignShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling assignShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/AssignShipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderAssignShipmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Assign Shipment
     */
    async assignShipment(requestParameters: AssignShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.assignShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calculate Refund
     */
    async calculateRefundRaw(requestParameters: CalculateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderCalculateRefundResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling calculateRefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CalculateRefund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCalculateRefundRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderCalculateRefundResponseFromJSON(jsonValue));
    }

    /**
     * Calculate Refund
     */
    async calculateRefund(requestParameters: CalculateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderCalculateRefundResponse> {
        const response = await this.calculateRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel Fulfillment
     */
    async cancelFulfillmentRaw(requestParameters: CancelFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling cancelFulfillment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CancelFulfillment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCancelFulfillmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Cancel Fulfillment
     */
    async cancelFulfillment(requestParameters: CancelFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel Order
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling cancelOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CancelOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCancelOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Cancel Order
     */
    async cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel Shipment
     */
    async cancelShipmentRaw(requestParameters: CancelShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling cancelShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CancelShipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCancelShipmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Cancel Shipment
     */
    async cancelShipment(requestParameters: CancelShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Complete Shipment Packing
     */
    async completeShipmentPackingRaw(requestParameters: CompleteShipmentPackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling completeShipmentPacking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CompleteShipmentPacking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCompleteShipmentPackingRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Complete Shipment Packing
     */
    async completeShipmentPacking(requestParameters: CompleteShipmentPackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.completeShipmentPackingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Fulfillment
     */
    async createFulfillmentRaw(requestParameters: CreateFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderFulfillment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createFulfillment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CreateFulfillment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateFulfillmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFulfillmentFromJSON(jsonValue));
    }

    /**
     * Create Fulfillment
     */
    async createFulfillment(requestParameters: CreateFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderFulfillment> {
        const response = await this.createFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Order
     */
    async createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOrderData>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CreateOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOrderDataFromJSON(jsonValue));
    }

    /**
     * Create Order
     */
    async createOrder(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOrderData> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Order History
     */
    async createOrderHistoryRaw(requestParameters: CreateOrderHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderDataHistory>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createOrderHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CreateHistory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateHistoryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDataHistoryFromJSON(jsonValue));
    }

    /**
     * Create Order History
     */
    async createOrderHistory(requestParameters: CreateOrderHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderDataHistory> {
        const response = await this.createOrderHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Payment
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderPayment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CreatePayment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreatePaymentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderPaymentFromJSON(jsonValue));
    }

    /**
     * Create Payment
     */
    async createPayment(requestParameters: CreatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderPayment> {
        const response = await this.createPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Payment Transaction
     */
    async createPaymentTransactionRaw(requestParameters: CreatePaymentTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderTransaction>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPaymentTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CreatePaymentTransaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreatePaymentTransactionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderTransactionFromJSON(jsonValue));
    }

    /**
     * Create Payment Transaction
     */
    async createPaymentTransaction(requestParameters: CreatePaymentTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderTransaction> {
        const response = await this.createPaymentTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Refund
     */
    async createRefundRaw(requestParameters: CreateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRefund>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createRefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CreateRefund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateRefundRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderRefundFromJSON(jsonValue));
    }

    /**
     * Create Refund
     */
    async createRefund(requestParameters: CreateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRefund> {
        const response = await this.createRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Refund Transaction
     */
    async createRefundTransactionRaw(requestParameters: CreateRefundTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderTransaction>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createRefundTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CreateRefundTransaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateRefundTransactionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderTransactionFromJSON(jsonValue));
    }

    /**
     * Create Refund Transaction
     */
    async createRefundTransaction(requestParameters: CreateRefundTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderTransaction> {
        const response = await this.createRefundTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Shipment
     */
    async createShipmentRaw(requestParameters: CreateShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderShipment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/CreateShipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateShipmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderShipmentFromJSON(jsonValue));
    }

    /**
     * Create Shipment
     */
    async createShipment(requestParameters: CreateShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderShipment> {
        const response = await this.createShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Order
     */
    async deleteOrderRaw(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/DeleteOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderDeleteOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete Order
     */
    async deleteOrder(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Fulfillment
     */
    async getFulfillmentRaw(requestParameters: GetFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderFulfillment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getFulfillment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/GetFulfillment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderGetFulfillmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFulfillmentFromJSON(jsonValue));
    }

    /**
     * Get Fulfillment
     */
    async getFulfillment(requestParameters: GetFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderFulfillment> {
        const response = await this.getFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Order
     */
    async getOrderRaw(requestParameters: GetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOrderData>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/GetOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderGetOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOrderDataFromJSON(jsonValue));
    }

    /**
     * Get Order
     */
    async getOrder(requestParameters: GetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOrderData> {
        const response = await this.getOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Order by Cart ID
     */
    async getOrderByCartIdRaw(requestParameters: GetOrderByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOrderData>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getOrderByCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/GetOrderByCartId`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderGetOrderByCartIdRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOrderDataFromJSON(jsonValue));
    }

    /**
     * Get Order by Cart ID
     */
    async getOrderByCartId(requestParameters: GetOrderByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOrderData> {
        const response = await this.getOrderByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Order by Order Number
     */
    async getOrderByOrderNumberRaw(requestParameters: GetOrderByOrderNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOrderData>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getOrderByOrderNumber.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/GetOrderByOrderNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderGetOrderByOrderNumberRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOrderDataFromJSON(jsonValue));
    }

    /**
     * Get Order by Order Number
     */
    async getOrderByOrderNumber(requestParameters: GetOrderByOrderNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOrderData> {
        const response = await this.getOrderByOrderNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Payment
     */
    async getPaymentRaw(requestParameters: GetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderPayment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getPayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/GetPayment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderGetPaymentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderPaymentFromJSON(jsonValue));
    }

    /**
     * Get Payment
     */
    async getPayment(requestParameters: GetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderPayment> {
        const response = await this.getPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipment
     */
    async getShipmentRaw(requestParameters: GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderShipment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/GetShipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderGetShipmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderShipmentFromJSON(jsonValue));
    }

    /**
     * Get Shipment
     */
    async getShipment(requestParameters: GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderShipment> {
        const response = await this.getShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Transaction
     */
    async getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderTransaction>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/GetTransaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderGetTransactionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderTransactionFromJSON(jsonValue));
    }

    /**
     * Get Transaction
     */
    async getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderTransaction> {
        const response = await this.getTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hold Order
     */
    async holdOrderRaw(requestParameters: HoldOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling holdOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/HoldOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderHoldOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Hold Order
     */
    async holdOrder(requestParameters: HoldOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.holdOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import Order
     */
    async importOrderRaw(requestParameters: ImportOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOrderData>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling importOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ImportOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderImportOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOrderDataFromJSON(jsonValue));
    }

    /**
     * Import Order
     */
    async importOrder(requestParameters: ImportOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOrderData> {
        const response = await this.importOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Fulfillments
     */
    async listFulfillmentsRaw(requestParameters: ListFulfillmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListFulfillmentsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listFulfillments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ListFulfillments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderListFulfillmentsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderListFulfillmentsResponseFromJSON(jsonValue));
    }

    /**
     * List Fulfillments
     */
    async listFulfillments(requestParameters: ListFulfillmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListFulfillmentsResponse> {
        const response = await this.listFulfillmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Orders
     */
    async listOrdersRaw(requestParameters: ListOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListOrdersResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ListOrders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderListOrdersRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderListOrdersResponseFromJSON(jsonValue));
    }

    /**
     * List Orders
     */
    async listOrders(requestParameters: ListOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListOrdersResponse> {
        const response = await this.listOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Orders by Customer
     */
    async listOrdersByCustomerRaw(requestParameters: ListOrdersByCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListOrdersByCustomerResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listOrdersByCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ListOrdersByCustomer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderListOrdersByCustomerRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderListOrdersByCustomerResponseFromJSON(jsonValue));
    }

    /**
     * List Orders by Customer
     */
    async listOrdersByCustomer(requestParameters: ListOrdersByCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListOrdersByCustomerResponse> {
        const response = await this.listOrdersByCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Orders by Numbers
     */
    async listOrdersByNumbersRaw(requestParameters: ListOrdersByNumbersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListOrdersByNumbersResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listOrdersByNumbers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ListOrdersByNumbers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderListOrdersByNumbersRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderListOrdersByNumbersResponseFromJSON(jsonValue));
    }

    /**
     * List Orders by Numbers
     */
    async listOrdersByNumbers(requestParameters: ListOrdersByNumbersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListOrdersByNumbersResponse> {
        const response = await this.listOrdersByNumbersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Shipments
     */
    async listShipmentsRaw(requestParameters: ListShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListShipmentsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ListShipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderListShipmentsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderListShipmentsResponseFromJSON(jsonValue));
    }

    /**
     * List Shipments
     */
    async listShipments(requestParameters: ListShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListShipmentsResponse> {
        const response = await this.listShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Documents
     */
    async orderAddDocumentRaw(requestParameters: OrderAddDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling orderAddDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/AddDocument`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderAddDocumentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Documents
     */
    async orderAddDocument(requestParameters: OrderAddDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.orderAddDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async orderRemoveDocumentByCodeRaw(requestParameters: OrderRemoveDocumentByCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling orderRemoveDocumentByCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/RemoveDocumentByCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderRemoveDocumentByCodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async orderRemoveDocumentByCode(requestParameters: OrderRemoveDocumentByCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.orderRemoveDocumentByCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Print Orders Labels
     */
    async printOrdersLabelsRaw(requestParameters: PrintOrdersLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderPrintOrdersLabelsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling printOrdersLabels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/PrintOrdersLabels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderPrintOrdersLabelsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderPrintOrdersLabelsResponseFromJSON(jsonValue));
    }

    /**
     * Print Orders Labels
     */
    async printOrdersLabels(requestParameters: PrintOrdersLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderPrintOrdersLabelsResponse> {
        const response = await this.printOrdersLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Quash Fulfillment
     */
    async quashFulfillmentRaw(requestParameters: QuashFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling quashFulfillment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/QuashFulfillment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderQuashFulfillmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Quash Fulfillment
     */
    async quashFulfillment(requestParameters: QuashFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.quashFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Quash Shipment
     */
    async quashShipmentRaw(requestParameters: QuashShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling quashShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/QuashShipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderQuashShipmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Quash Shipment
     */
    async quashShipment(requestParameters: QuashShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.quashShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Receive Fulfillment
     */
    async receiveFulfillmentRaw(requestParameters: ReceiveFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling receiveFulfillment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ReceiveFulfillment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderReceiveFulfillmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Receive Fulfillment
     */
    async receiveFulfillment(requestParameters: ReceiveFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.receiveFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report Fulfillment Error
     */
    async reportFulfillmentErrorRaw(requestParameters: ReportFulfillmentErrorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling reportFulfillmentError.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ReportFulfillmentError`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderReportFulfillmentErrorRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Report Fulfillment Error
     */
    async reportFulfillmentError(requestParameters: ReportFulfillmentErrorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.reportFulfillmentErrorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report Fulfillment Not Resolvable
     */
    async reportFulfillmentNotResolvableRaw(requestParameters: ReportFulfillmentNotResolvableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling reportFulfillmentNotResolvable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ReportFulfillmentNotResolvable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderReportFulfillmentNotResolvableRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Report Fulfillment Not Resolvable
     */
    async reportFulfillmentNotResolvable(requestParameters: ReportFulfillmentNotResolvableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.reportFulfillmentNotResolvableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report Fulfillment Ready
     */
    async reportFulfillmentReadyRaw(requestParameters: ReportFulfillmentReadyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling reportFulfillmentReady.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ReportFulfillmentReady`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderReportFulfillmentReadyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Report Fulfillment Ready
     */
    async reportFulfillmentReady(requestParameters: ReportFulfillmentReadyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.reportFulfillmentReadyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report Shipment Delivery
     */
    async reportShipmentDeliveryRaw(requestParameters: ReportShipmentDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling reportShipmentDelivery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ReportShipmentDelivery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderReportShipmentDeliveryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Report Shipment Delivery
     */
    async reportShipmentDelivery(requestParameters: ReportShipmentDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.reportShipmentDeliveryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report Shipment Missing Stock
     */
    async reportShipmentMissingStockRaw(requestParameters: ReportShipmentMissingStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling reportShipmentMissingStock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ReportShipmentMissingStock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderReportShipmentMissingStockRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Report Shipment Missing Stock
     */
    async reportShipmentMissingStock(requestParameters: ReportShipmentMissingStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.reportShipmentMissingStockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve Shipment Missing Stock
     */
    async resolveShipmentMissingStockRaw(requestParameters: ResolveShipmentMissingStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling resolveShipmentMissingStock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/ResolveShipmentMissingStock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderResolveShipmentMissingStockRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Resolve Shipment Missing Stock
     */
    async resolveShipmentMissingStock(requestParameters: ResolveShipmentMissingStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.resolveShipmentMissingStockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retry Fulfillment
     */
    async retryFulfillmentRaw(requestParameters: RetryFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling retryFulfillment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/RetryFulfillment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderRetryFulfillmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retry Fulfillment
     */
    async retryFulfillment(requestParameters: RetryFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.retryFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Orders
     */
    async searchOrdersRaw(requestParameters: SearchOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderSearchOrdersResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling searchOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/SearchOrders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderSearchOrdersRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderSearchOrdersResponseFromJSON(jsonValue));
    }

    /**
     * Search Orders
     */
    async searchOrders(requestParameters: SearchOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderSearchOrdersResponse> {
        const response = await this.searchOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send Fulfillment
     */
    async sendFulfillmentRaw(requestParameters: SendFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendFulfillment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/SendFulfillment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderSendFulfillmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send Fulfillment
     */
    async sendFulfillment(requestParameters: SendFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.sendFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send Order Notification
     */
    async sendOrderNotificationRaw(requestParameters: SendOrderNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendOrderNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/SendOrderNotification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderSendOrderNotificationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send Order Notification
     */
    async sendOrderNotification(requestParameters: SendOrderNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.sendOrderNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start Fulfillment Processing
     */
    async startFulfillmentProcessingRaw(requestParameters: StartFulfillmentProcessingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startFulfillmentProcessing.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/StartFulfillmentProcessing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderStartFulfillmentProcessingRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Start Fulfillment Processing
     */
    async startFulfillmentProcessing(requestParameters: StartFulfillmentProcessingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.startFulfillmentProcessingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start Shipment Processing
     */
    async startShipmentProcessingRaw(requestParameters: StartShipmentProcessingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startShipmentProcessing.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/StartShipmentProcessing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderStartShipmentProcessingRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Start Shipment Processing
     */
    async startShipmentProcessing(requestParameters: StartShipmentProcessingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.startShipmentProcessingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unhold Order
     */
    async unholdOrderRaw(requestParameters: UnholdOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling unholdOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/UnholdOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUnholdOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unhold Order
     */
    async unholdOrder(requestParameters: UnholdOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unholdOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Order
     */
    async updateOrderRaw(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOrderData>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/UpdateOrder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUpdateOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOrderDataFromJSON(jsonValue));
    }

    /**
     * Update Order
     */
    async updateOrder(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOrderData> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Payment
     */
    async updatePaymentRaw(requestParameters: UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderPayment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updatePayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/order.Order/UpdatePayment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUpdatePaymentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderPaymentFromJSON(jsonValue));
    }

    /**
     * Update Payment
     */
    async updatePayment(requestParameters: UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderPayment> {
        const response = await this.updatePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
