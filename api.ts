/* tslint:disable */
/* eslint-disable */
/**
 * order Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateOrderRequestInitialPayment
 */
export interface CreateOrderRequestInitialPayment {
    /**
     * 
     * @type {string}
     * @memberof CreateOrderRequestInitialPayment
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderRequestInitialPayment
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {OrderMoney}
     * @memberof CreateOrderRequestInitialPayment
     */
    'amount'?: OrderMoney;
    /**
     * 
     * @type {PaymentCcInfo}
     * @memberof CreateOrderRequestInitialPayment
     */
    'ccInfo'?: PaymentCcInfo;
    /**
     * 
     * @type {InitialPaymentInitialTransaction}
     * @memberof CreateOrderRequestInitialPayment
     */
    'transaction'?: InitialPaymentInitialTransaction;
}
/**
 * 
 * @export
 * @interface ImportOrderRequestImportedPayment
 */
export interface ImportOrderRequestImportedPayment {
    /**
     * 
     * @type {string}
     * @memberof ImportOrderRequestImportedPayment
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImportOrderRequestImportedPayment
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {Array<OrderPaymentAmount>}
     * @memberof ImportOrderRequestImportedPayment
     */
    'amounts'?: Array<OrderPaymentAmount>;
    /**
     * 
     * @type {PaymentCcInfo}
     * @memberof ImportOrderRequestImportedPayment
     */
    'ccInfo'?: PaymentCcInfo;
}
/**
 * 
 * @export
 * @interface InitialPaymentInitialTransaction
 */
export interface InitialPaymentInitialTransaction {
    /**
     * 
     * @type {OrderTransactionType}
     * @memberof InitialPaymentInitialTransaction
     */
    'type'?: OrderTransactionType;
    /**
     * 
     * @type {string}
     * @memberof InitialPaymentInitialTransaction
     */
    'additionalInfo'?: string;
}


/**
 * 
 * @export
 * @interface OrderApproveOrderRequest
 */
export interface OrderApproveOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderApproveOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderApproveOrderRequest
     */
    'orderId'?: string;
}
/**
 * 
 * @export
 * @interface OrderAssignShipmentRequest
 */
export interface OrderAssignShipmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderAssignShipmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderAssignShipmentRequest
     */
    'shipmentId'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OrderByDirection = {
    Default: 'DEFAULT',
    Asc: 'ASC',
    Desc: 'DESC'
} as const;

export type OrderByDirection = typeof OrderByDirection[keyof typeof OrderByDirection];


/**
 * 
 * @export
 * @interface OrderCalculateRefundRequest
 */
export interface OrderCalculateRefundRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCalculateRefundRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCalculateRefundRequest
     */
    'paymentId'?: string;
    /**
     * 
     * @type {Array<OrderRefundItem>}
     * @memberof OrderCalculateRefundRequest
     */
    'items'?: Array<OrderRefundItem>;
    /**
     * Boolean indicating whether to calculate refund for shipping.
     * @type {boolean}
     * @memberof OrderCalculateRefundRequest
     */
    'shipping'?: boolean;
}
/**
 * 
 * @export
 * @interface OrderCalculateRefundResponse
 */
export interface OrderCalculateRefundResponse {
    /**
     * 
     * @type {OrderCreateRefundRequest}
     * @memberof OrderCalculateRefundResponse
     */
    'createRefundRequest'?: OrderCreateRefundRequest;
}
/**
 * 
 * @export
 * @interface OrderCancelFulfillmentRequest
 */
export interface OrderCancelFulfillmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCancelFulfillmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCancelFulfillmentRequest
     */
    'fulfillmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCancelFulfillmentRequest
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface OrderCancelOrderRequest
 */
export interface OrderCancelOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCancelOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCancelOrderRequest
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCancelOrderRequest
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface OrderCancelShipmentRequest
 */
export interface OrderCancelShipmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCancelShipmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCancelShipmentRequest
     */
    'shipmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCancelShipmentRequest
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface OrderCompleteShipmentPackingRequest
 */
export interface OrderCompleteShipmentPackingRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCompleteShipmentPackingRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCompleteShipmentPackingRequest
     */
    'shipmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderCreateFulfillmentRequest
 */
export interface OrderCreateFulfillmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCreateFulfillmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateFulfillmentRequest
     */
    'orderId'?: string;
    /**
     * 
     * @type {Array<OrderFulfillmentItem>}
     * @memberof OrderCreateFulfillmentRequest
     */
    'items'?: Array<OrderFulfillmentItem>;
}
/**
 * 
 * @export
 * @interface OrderCreateHistoryRequest
 */
export interface OrderCreateHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCreateHistoryRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateHistoryRequest
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateHistoryRequest
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface OrderCreateOrderRequest
 */
export interface OrderCreateOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCreateOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateOrderRequest
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateOrderRequest
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateOrderRequest
     */
    'market'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateOrderRequest
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<OrderOrderDataItem>}
     * @memberof OrderCreateOrderRequest
     */
    'items'?: Array<OrderOrderDataItem>;
    /**
     * 
     * @type {Array<OrderDataPaymentInfo>}
     * @memberof OrderCreateOrderRequest
     */
    'paymentsInfo'?: Array<OrderDataPaymentInfo>;
    /**
     * 
     * @type {Array<OrderDataShipmentInfo>}
     * @memberof OrderCreateOrderRequest
     */
    'shipmentsInfo'?: Array<OrderDataShipmentInfo>;
    /**
     * 
     * @type {Array<OrderDataPromotionInfo>}
     * @memberof OrderCreateOrderRequest
     */
    'promotions'?: Array<OrderDataPromotionInfo>;
    /**
     * 
     * @type {Array<CreateOrderRequestInitialPayment>}
     * @memberof OrderCreateOrderRequest
     */
    'payments'?: Array<CreateOrderRequestInitialPayment>;
    /**
     * 
     * @type {OrderCurrency}
     * @memberof OrderCreateOrderRequest
     */
    'currency'?: OrderCurrency;
    /**
     * 
     * @type {{ [key: string]: OrderDataSubtotal; }}
     * @memberof OrderCreateOrderRequest
     */
    'subtotals'?: { [key: string]: OrderDataSubtotal; };
    /**
     * 
     * @type {{ [key: string]: OrderDataTotal; }}
     * @memberof OrderCreateOrderRequest
     */
    'totals'?: { [key: string]: OrderDataTotal; };
    /**
     * 
     * @type {boolean}
     * @memberof OrderCreateOrderRequest
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderCreateOrderRequest
     */
    'billingAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderCreateOrderRequest
     */
    'shippingAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderDataCustomerInfo}
     * @memberof OrderCreateOrderRequest
     */
    'customerInfo'?: OrderDataCustomerInfo;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateOrderRequest
     */
    'cartGrn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderCreateOrderRequest
     */
    'onHold'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateOrderRequest
     */
    'notes'?: string;
}


/**
 * 
 * @export
 * @interface OrderCreatePaymentRequest
 */
export interface OrderCreatePaymentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCreatePaymentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreatePaymentRequest
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreatePaymentRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreatePaymentRequest
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderCreatePaymentRequest
     */
    'amount'?: OrderMoney;
    /**
     * 
     * @type {PaymentCcInfo}
     * @memberof OrderCreatePaymentRequest
     */
    'ccInfo'?: PaymentCcInfo;
}
/**
 * 
 * @export
 * @interface OrderCreatePaymentTransactionRequest
 */
export interface OrderCreatePaymentTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCreatePaymentTransactionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreatePaymentTransactionRequest
     */
    'paymentId'?: string;
    /**
     * 
     * @type {OrderTransactionType}
     * @memberof OrderCreatePaymentTransactionRequest
     */
    'type'?: OrderTransactionType;
    /**
     * 
     * @type {string}
     * @memberof OrderCreatePaymentTransactionRequest
     */
    'additionalInfo'?: string;
}


/**
 * 
 * @export
 * @interface OrderCreateRefundRequest
 */
export interface OrderCreateRefundRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCreateRefundRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateRefundRequest
     */
    'paymentId'?: string;
    /**
     * 
     * @type {Array<OrderRefundItem>}
     * @memberof OrderCreateRefundRequest
     */
    'items'?: Array<OrderRefundItem>;
    /**
     * 
     * @type {Array<OrderRefundAmount>}
     * @memberof OrderCreateRefundRequest
     */
    'amounts'?: Array<OrderRefundAmount>;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateRefundRequest
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateRefundRequest
     */
    'additionalInfo'?: string;
}
/**
 * 
 * @export
 * @interface OrderCreateRefundTransactionRequest
 */
export interface OrderCreateRefundTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCreateRefundTransactionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateRefundTransactionRequest
     */
    'refundId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateRefundTransactionRequest
     */
    'parentTransactionId'?: string;
    /**
     * 
     * @type {OrderTransactionType}
     * @memberof OrderCreateRefundTransactionRequest
     */
    'type'?: OrderTransactionType;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateRefundTransactionRequest
     */
    'additionalInfo'?: string;
}


/**
 * 
 * @export
 * @interface OrderCreateShipmentRequest
 */
export interface OrderCreateShipmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderCreateShipmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateShipmentRequest
     */
    'orderId'?: string;
    /**
     * 
     * @type {Array<OrderShipmentItem>}
     * @memberof OrderCreateShipmentRequest
     */
    'items'?: Array<OrderShipmentItem>;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderCreateShipmentRequest
     */
    'address'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderCreateShipmentRequest
     */
    'fromAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderCreateShipmentRequest
     */
    'returnAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateShipmentRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateShipmentRequest
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OrderCurrency = {
    Xxx: 'XXX',
    All: 'ALL',
    Dzd: 'DZD',
    Ars: 'ARS',
    Aud: 'AUD',
    Bsd: 'BSD',
    Bhd: 'BHD',
    Bdt: 'BDT',
    Amd: 'AMD',
    Bbd: 'BBD',
    Bmd: 'BMD',
    Btn: 'BTN',
    Bob: 'BOB',
    Bwp: 'BWP',
    Bzd: 'BZD',
    Sbd: 'SBD',
    Bnd: 'BND',
    Mmk: 'MMK',
    Bif: 'BIF',
    Khr: 'KHR',
    Cad: 'CAD',
    Cve: 'CVE',
    Kyd: 'KYD',
    Lkr: 'LKR',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Kmf: 'KMF',
    Crc: 'CRC',
    Hrk: 'HRK',
    Cup: 'CUP',
    Czk: 'CZK',
    Dkk: 'DKK',
    Dop: 'DOP',
    Svc: 'SVC',
    Etb: 'ETB',
    Ern: 'ERN',
    Fkp: 'FKP',
    Fjd: 'FJD',
    Djf: 'DJF',
    Gmd: 'GMD',
    Gip: 'GIP',
    Gtq: 'GTQ',
    Gnf: 'GNF',
    Gyd: 'GYD',
    Htg: 'HTG',
    Hnl: 'HNL',
    Hkd: 'HKD',
    Huf: 'HUF',
    Isk: 'ISK',
    Inr: 'INR',
    Idr: 'IDR',
    Irr: 'IRR',
    Iqd: 'IQD',
    Ils: 'ILS',
    Jmd: 'JMD',
    Jpy: 'JPY',
    Kzt: 'KZT',
    Jod: 'JOD',
    Kes: 'KES',
    Kpw: 'KPW',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kgs: 'KGS',
    Lak: 'LAK',
    Lbp: 'LBP',
    Lsl: 'LSL',
    Lrd: 'LRD',
    Lyd: 'LYD',
    Ltl: 'LTL',
    Mop: 'MOP',
    Mwk: 'MWK',
    Myr: 'MYR',
    Mvr: 'MVR',
    Mro: 'MRO',
    Mur: 'MUR',
    Mxn: 'MXN',
    Mnt: 'MNT',
    Mdl: 'MDL',
    Mad: 'MAD',
    Omr: 'OMR',
    Nad: 'NAD',
    Npr: 'NPR',
    Ang: 'ANG',
    Awg: 'AWG',
    Vuv: 'VUV',
    Nzd: 'NZD',
    Nio: 'NIO',
    Ngn: 'NGN',
    Nok: 'NOK',
    Pkr: 'PKR',
    Pab: 'PAB',
    Pgk: 'PGK',
    Pyg: 'PYG',
    Pen: 'PEN',
    Php: 'PHP',
    Qar: 'QAR',
    Rub: 'RUB',
    Rwf: 'RWF',
    Shp: 'SHP',
    Std: 'STD',
    Sar: 'SAR',
    Scr: 'SCR',
    Sll: 'SLL',
    Sgd: 'SGD',
    Vnd: 'VND',
    Sos: 'SOS',
    Zar: 'ZAR',
    Ssp: 'SSP',
    Szl: 'SZL',
    Sek: 'SEK',
    Chf: 'CHF',
    Syp: 'SYP',
    Thb: 'THB',
    Top: 'TOP',
    Ttd: 'TTD',
    Aed: 'AED',
    Tnd: 'TND',
    Ugx: 'UGX',
    Mkd: 'MKD',
    Egp: 'EGP',
    Gbp: 'GBP',
    Tzs: 'TZS',
    Usd: 'USD',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Wst: 'WST',
    Yer: 'YER',
    Twd: 'TWD',
    Cuc: 'CUC',
    Zwl: 'ZWL',
    Tmt: 'TMT',
    Ghs: 'GHS',
    Vef: 'VEF',
    Sdg: 'SDG',
    Uyi: 'UYI',
    Rsd: 'RSD',
    Mzn: 'MZN',
    Azn: 'AZN',
    Ron: 'RON',
    Che: 'CHE',
    Chw: 'CHW',
    Try: 'TRY',
    Xaf: 'XAF',
    Xcd: 'XCD',
    Xof: 'XOF',
    Xpf: 'XPF',
    Xba: 'XBA',
    Xbb: 'XBB',
    Xbc: 'XBC',
    Xbd: 'XBD',
    Xau: 'XAU',
    Xdr: 'XDR',
    Xag: 'XAG',
    Xpt: 'XPT',
    Xpd: 'XPD',
    Xua: 'XUA',
    Zmw: 'ZMW',
    Srd: 'SRD',
    Mga: 'MGA',
    Cou: 'COU',
    Afn: 'AFN',
    Tjs: 'TJS',
    Aoa: 'AOA',
    Byr: 'BYR',
    Bgn: 'BGN',
    Cdf: 'CDF',
    Bam: 'BAM',
    Eur: 'EUR',
    Mxv: 'MXV',
    Uah: 'UAH',
    Gel: 'GEL',
    Bov: 'BOV',
    Pln: 'PLN',
    Brl: 'BRL',
    Clf: 'CLF',
    Xsu: 'XSU',
    Usn: 'USN'
} as const;

export type OrderCurrency = typeof OrderCurrency[keyof typeof OrderCurrency];


/**
 * 
 * @export
 * @interface OrderDataCustomerInfo
 */
export interface OrderDataCustomerInfo {
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'segment'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'data'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'certifiedEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataCustomerInfo
     */
    'taxCode'?: string;
}
/**
 * 
 * @export
 * @interface OrderDataHistory
 */
export interface OrderDataHistory {
    /**
     * 
     * @type {string}
     * @memberof OrderDataHistory
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataHistory
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataHistory
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface OrderDataPaymentInfo
 */
export interface OrderDataPaymentInfo {
    /**
     * 
     * @type {string}
     * @memberof OrderDataPaymentInfo
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataPaymentInfo
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataPaymentInfo
     */
    'amount'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataPaymentInfo
     */
    'fee'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataPaymentInfo
     */
    'vatAmount'?: OrderMoney;
    /**
     * 
     * @type {number}
     * @memberof OrderDataPaymentInfo
     */
    'vatPercentage'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderDataPaymentInfo
     */
    'vatInaccurate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderDataPaymentInfo
     */
    'vatCalculated'?: boolean;
    /**
     * 
     * @type {OrderLocalizedText}
     * @memberof OrderDataPaymentInfo
     */
    'title'?: OrderLocalizedText;
    /**
     * 
     * @type {OrderLocalizedText}
     * @memberof OrderDataPaymentInfo
     */
    'label'?: OrderLocalizedText;
}
/**
 * 
 * @export
 * @interface OrderDataPromotionInfo
 */
export interface OrderDataPromotionInfo {
    /**
     * 
     * @type {string}
     * @memberof OrderDataPromotionInfo
     */
    'promotionGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataPromotionInfo
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataPromotionInfo
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataPromotionInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataPromotionInfo
     */
    'description'?: string;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataPromotionInfo
     */
    'amount'?: OrderMoney;
    /**
     * 
     * @type {string}
     * @memberof OrderDataPromotionInfo
     */
    'couponCode'?: string;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataPromotionInfo
     */
    'vatAmount'?: OrderMoney;
    /**
     * 
     * @type {number}
     * @memberof OrderDataPromotionInfo
     */
    'vatPercentage'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderDataPromotionInfo
     */
    'vatInaccurate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderDataPromotionInfo
     */
    'vatCalculated'?: boolean;
}
/**
 * 
 * @export
 * @interface OrderDataShipmentInfo
 */
export interface OrderDataShipmentInfo {
    /**
     * 
     * @type {string}
     * @memberof OrderDataShipmentInfo
     */
    'reference'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataShipmentInfo
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataShipmentInfo
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataShipmentInfo
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDataShipmentInfo
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataShipmentInfo
     */
    'amount'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataShipmentInfo
     */
    'fee'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataShipmentInfo
     */
    'vatAmount'?: OrderMoney;
    /**
     * 
     * @type {number}
     * @memberof OrderDataShipmentInfo
     */
    'vatPercentage'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderDataShipmentInfo
     */
    'vatInaccurate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderDataShipmentInfo
     */
    'vatCalculated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderDataShipmentInfo
     */
    'grn'?: string;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderDataShipmentInfo
     */
    'fromAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderDataShipmentInfo
     */
    'returnAddress'?: OrderPostalAddress;
}
/**
 * 
 * @export
 * @interface OrderDataSubtotal
 */
export interface OrderDataSubtotal {
    /**
     * 
     * @type {OrderDataSubtotalCode}
     * @memberof OrderDataSubtotal
     */
    'code'?: OrderDataSubtotalCode;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataSubtotal
     */
    'value'?: OrderMoney;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderDataSubtotalCode = {
    Unknown: 'UNKNOWN',
    Payment: 'PAYMENT',
    Shipment: 'SHIPMENT',
    Tax: 'TAX',
    Items: 'ITEMS',
    ItemsDiscounted: 'ITEMS_DISCOUNTED',
    Discount: 'DISCOUNT'
} as const;

export type OrderDataSubtotalCode = typeof OrderDataSubtotalCode[keyof typeof OrderDataSubtotalCode];


/**
 * 
 * @export
 * @interface OrderDataTotal
 */
export interface OrderDataTotal {
    /**
     * 
     * @type {OrderDataTotalCode}
     * @memberof OrderDataTotal
     */
    'code'?: OrderDataTotalCode;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderDataTotal
     */
    'value'?: OrderMoney;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderDataTotalCode = {
    Unknown: 'UNKNOWN',
    Ordered: 'ORDERED',
    Paid: 'PAID',
    Refunded: 'REFUNDED'
} as const;

export type OrderDataTotalCode = typeof OrderDataTotalCode[keyof typeof OrderDataTotalCode];


/**
 * 
 * @export
 * @interface OrderDeleteOrderRequest
 */
export interface OrderDeleteOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderDeleteOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDeleteOrderRequest
     */
    'orderId'?: string;
}
/**
 * 
 * @export
 * @interface OrderFulfillment
 */
export interface OrderFulfillment {
    /**
     * 
     * @type {string}
     * @memberof OrderFulfillment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderFulfillment
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderFulfillment
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderFulfillment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderFulfillment
     */
    'status'?: string;
    /**
     * 
     * @type {Array<OrderFulfillmentItem>}
     * @memberof OrderFulfillment
     */
    'items'?: Array<OrderFulfillmentItem>;
}
/**
 * 
 * @export
 * @interface OrderFulfillmentItem
 */
export interface OrderFulfillmentItem {
    /**
     * 
     * @type {string}
     * @memberof OrderFulfillmentItem
     */
    'orderItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderFulfillmentItem
     */
    'qty'?: number;
}
/**
 * 
 * @export
 * @interface OrderGetFulfillmentRequest
 */
export interface OrderGetFulfillmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderGetFulfillmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetFulfillmentRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface OrderGetOrderByCartIdRequest
 */
export interface OrderGetOrderByCartIdRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderGetOrderByCartIdRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetOrderByCartIdRequest
     */
    'cartId'?: string;
}
/**
 * 
 * @export
 * @interface OrderGetOrderByOrderNumberRequest
 */
export interface OrderGetOrderByOrderNumberRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderGetOrderByOrderNumberRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetOrderByOrderNumberRequest
     */
    'orderNumber'?: string;
}
/**
 * 
 * @export
 * @interface OrderGetOrderRequest
 */
export interface OrderGetOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderGetOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetOrderRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface OrderGetPaymentRequest
 */
export interface OrderGetPaymentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderGetPaymentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetPaymentRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface OrderGetShipmentRequest
 */
export interface OrderGetShipmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderGetShipmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetShipmentRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface OrderGetTransactionRequest
 */
export interface OrderGetTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderGetTransactionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderGetTransactionRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface OrderHoldOrderRequest
 */
export interface OrderHoldOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderHoldOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderHoldOrderRequest
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderHoldOrderRequest
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface OrderImportOrderRequest
 */
export interface OrderImportOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderImportOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportOrderRequest
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportOrderRequest
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportOrderRequest
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportOrderRequest
     */
    'market'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportOrderRequest
     */
    'locale'?: string;
    /**
     * 
     * @type {OrderDataCustomerInfo}
     * @memberof OrderImportOrderRequest
     */
    'customerInfo'?: OrderDataCustomerInfo;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderImportOrderRequest
     */
    'shippingAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderImportOrderRequest
     */
    'billingAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {Array<ImportOrderRequestImportedPayment>}
     * @memberof OrderImportOrderRequest
     */
    'payments'?: Array<ImportOrderRequestImportedPayment>;
    /**
     * 
     * @type {Array<OrderDataPaymentInfo>}
     * @memberof OrderImportOrderRequest
     */
    'paymentsInfo'?: Array<OrderDataPaymentInfo>;
    /**
     * 
     * @type {Array<OrderDataShipmentInfo>}
     * @memberof OrderImportOrderRequest
     */
    'shipmentsInfo'?: Array<OrderDataShipmentInfo>;
    /**
     * 
     * @type {Array<OrderOrderDataItem>}
     * @memberof OrderImportOrderRequest
     */
    'items'?: Array<OrderOrderDataItem>;
    /**
     * 
     * @type {{ [key: string]: OrderDataSubtotal; }}
     * @memberof OrderImportOrderRequest
     */
    'subtotals'?: { [key: string]: OrderDataSubtotal; };
    /**
     * 
     * @type {{ [key: string]: OrderDataTotal; }}
     * @memberof OrderImportOrderRequest
     */
    'totals'?: { [key: string]: OrderDataTotal; };
    /**
     * 
     * @type {string}
     * @memberof OrderImportOrderRequest
     */
    'status'?: string;
    /**
     * 
     * @type {OrderCurrency}
     * @memberof OrderImportOrderRequest
     */
    'currency'?: OrderCurrency;
}


/**
 * 
 * @export
 * @interface OrderListFulfillmentsRequest
 */
export interface OrderListFulfillmentsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderListFulfillmentsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderListFulfillmentsRequest
     */
    'orderId'?: string;
}
/**
 * 
 * @export
 * @interface OrderListFulfillmentsResponse
 */
export interface OrderListFulfillmentsResponse {
    /**
     * 
     * @type {Array<OrderFulfillment>}
     * @memberof OrderListFulfillmentsResponse
     */
    'fulfillments'?: Array<OrderFulfillment>;
}
/**
 * 
 * @export
 * @interface OrderListOrdersByCustomerRequest
 */
export interface OrderListOrdersByCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderListOrdersByCustomerRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderListOrdersByCustomerRequest
     */
    'customerGrn'?: string;
    /**
     * The maximum number of orders to return. The service may return fewer than this value. If unspecified, at most 10 orders will be returned. The maximum value is 100; values above 100 will be coerced to 100.
     * @type {number}
     * @memberof OrderListOrdersByCustomerRequest
     */
    'pageSize'?: number;
    /**
     * A page token, received from a previous `ListOrders` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListOrders` must match the call that provided the page token.
     * @type {string}
     * @memberof OrderListOrdersByCustomerRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface OrderListOrdersByCustomerResponse
 */
export interface OrderListOrdersByCustomerResponse {
    /**
     * 
     * @type {Array<OrderOrderData>}
     * @memberof OrderListOrdersByCustomerResponse
     */
    'orders'?: Array<OrderOrderData>;
    /**
     * A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     * @type {string}
     * @memberof OrderListOrdersByCustomerResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface OrderListOrdersByNumbersRequest
 */
export interface OrderListOrdersByNumbersRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderListOrdersByNumbersRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderListOrdersByNumbersRequest
     */
    'numbers'?: Array<string>;
    /**
     * The maximum number of orders to return. The service may return fewer than this value. If unspecified, at most 10 orders will be returned. The maximum value is 100; values above 100 will be coerced to 100.
     * @type {number}
     * @memberof OrderListOrdersByNumbersRequest
     */
    'pageSize'?: number;
    /**
     * A page token, received from a previous `ListOrders` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListOrders` must match the call that provided the page token.
     * @type {string}
     * @memberof OrderListOrdersByNumbersRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface OrderListOrdersByNumbersResponse
 */
export interface OrderListOrdersByNumbersResponse {
    /**
     * 
     * @type {Array<OrderOrderData>}
     * @memberof OrderListOrdersByNumbersResponse
     */
    'orders'?: Array<OrderOrderData>;
    /**
     * A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     * @type {string}
     * @memberof OrderListOrdersByNumbersResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface OrderListOrdersRequest
 */
export interface OrderListOrdersRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderListOrdersRequest
     */
    'tenantId'?: string;
    /**
     * The maximum number of orders to return. The service may return fewer than this value. If unspecified, at most 10 orders will be returned. The maximum value is 100; values above 100 will be coerced to 100.
     * @type {number}
     * @memberof OrderListOrdersRequest
     */
    'pageSize'?: number;
    /**
     * A page token, received from a previous `ListOrders` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListOrders` must match the call that provided the page token.
     * @type {string}
     * @memberof OrderListOrdersRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {Array<OrderOrderBy>}
     * @memberof OrderListOrdersRequest
     */
    'orderBy'?: Array<OrderOrderBy>;
    /**
     * 
     * @type {OrderStatusFilter}
     * @memberof OrderListOrdersRequest
     */
    'statusFilter'?: OrderStatusFilter;
}
/**
 * 
 * @export
 * @interface OrderListOrdersResponse
 */
export interface OrderListOrdersResponse {
    /**
     * 
     * @type {Array<OrderOrderData>}
     * @memberof OrderListOrdersResponse
     */
    'orders'?: Array<OrderOrderData>;
    /**
     * A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     * @type {string}
     * @memberof OrderListOrdersResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface OrderListShipmentsRequest
 */
export interface OrderListShipmentsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderListShipmentsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderListShipmentsRequest
     */
    'orderId'?: string;
}
/**
 * 
 * @export
 * @interface OrderListShipmentsResponse
 */
export interface OrderListShipmentsResponse {
    /**
     * 
     * @type {Array<OrderShipment>}
     * @memberof OrderListShipmentsResponse
     */
    'shipments'?: Array<OrderShipment>;
}
/**
 * 
 * @export
 * @interface OrderLocalizedText
 */
export interface OrderLocalizedText {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OrderLocalizedText
     */
    'value'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface OrderMoney
 */
export interface OrderMoney {
    /**
     * The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.
     * @type {string}
     * @memberof OrderMoney
     */
    'units'?: string;
    /**
     * Number of micro (10^-6) units of the amount. The value must be between -999,999 and +999,999 inclusive. If `units` is positive, `micros` must be positive or zero. If `units` is zero, `micros` can be positive, zero, or negative. If `units` is negative, `micros` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `micros`=-750,000.
     * @type {number}
     * @memberof OrderMoney
     */
    'micros'?: number;
}
/**
 * 
 * @export
 * @interface OrderOrderBy
 */
export interface OrderOrderBy {
    /**
     * 
     * @type {string}
     * @memberof OrderOrderBy
     */
    'field'?: string;
    /**
     * 
     * @type {OrderByDirection}
     * @memberof OrderOrderBy
     */
    'direction'?: OrderByDirection;
}


/**
 * 
 * @export
 * @interface OrderOrderData
 */
export interface OrderOrderData {
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'market'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'locale'?: string;
    /**
     * 
     * @type {object}
     * @memberof OrderOrderData
     */
    'additionalInfo'?: object;
    /**
     * 
     * @type {Array<OrderOrderDataItem>}
     * @memberof OrderOrderData
     */
    'items'?: Array<OrderOrderDataItem>;
    /**
     * 
     * @type {Array<OrderPayment>}
     * @memberof OrderOrderData
     */
    'payments'?: Array<OrderPayment>;
    /**
     * 
     * @type {Array<OrderShipment>}
     * @memberof OrderOrderData
     */
    'shipments'?: Array<OrderShipment>;
    /**
     * 
     * @type {Array<OrderDataPaymentInfo>}
     * @memberof OrderOrderData
     */
    'paymentsInfo'?: Array<OrderDataPaymentInfo>;
    /**
     * 
     * @type {Array<OrderDataShipmentInfo>}
     * @memberof OrderOrderData
     */
    'shipmentsInfo'?: Array<OrderDataShipmentInfo>;
    /**
     * 
     * @type {Array<OrderDataPromotionInfo>}
     * @memberof OrderOrderData
     */
    'promotions'?: Array<OrderDataPromotionInfo>;
    /**
     * 
     * @type {OrderCurrency}
     * @memberof OrderOrderData
     */
    'currency'?: OrderCurrency;
    /**
     * 
     * @type {{ [key: string]: OrderDataSubtotal; }}
     * @memberof OrderOrderData
     */
    'subtotals'?: { [key: string]: OrderDataSubtotal; };
    /**
     * 
     * @type {{ [key: string]: OrderDataTotal; }}
     * @memberof OrderOrderData
     */
    'totals'?: { [key: string]: OrderDataTotal; };
    /**
     * 
     * @type {boolean}
     * @memberof OrderOrderData
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderOrderData
     */
    'billingAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderOrderData
     */
    'shippingAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderDataCustomerInfo}
     * @memberof OrderOrderData
     */
    'customerInfo'?: OrderDataCustomerInfo;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'cartGrn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderOrderData
     */
    'onHold'?: boolean;
    /**
     * 
     * @type {Array<OrderDataHistory>}
     * @memberof OrderOrderData
     */
    'historyEvents'?: Array<OrderDataHistory>;
    /**
     * 
     * @type {Array<OrderFulfillment>}
     * @memberof OrderOrderData
     */
    'fulfillments'?: Array<OrderFulfillment>;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'notes'?: string;
    /**
     * this field is used to delete an order in \"soft-delete mode\". This field must be used from get/list endpoint to exclude these orders.
     * @type {boolean}
     * @memberof OrderOrderData
     */
    'isDeleted'?: boolean;
    /**
     * this field is used to save the original created_at order date. The created_at field is used to filter data.
     * @type {string}
     * @memberof OrderOrderData
     */
    'insertedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderData
     */
    'deletedAt'?: string;
}


/**
 * 
 * @export
 * @interface OrderOrderDataItem
 */
export interface OrderOrderDataItem {
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'productGrn'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderOrderDataItem
     */
    'qtyOrdered'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderOrderDataItem
     */
    'qtyCommitted'?: number;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'unitSalePrice'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'unitListPrice'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'unitBasePrice'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'unitVatAmount'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'rowSalePrice'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'rowListPrice'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'rowVatAmount'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'discountAmount'?: OrderMoney;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderOrderDataItem
     */
    'rowBasePrice'?: OrderMoney;
    /**
     * 
     * @type {number}
     * @memberof OrderOrderDataItem
     */
    'vatPercentage'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderOrderDataItem
     */
    'vatInaccurate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderOrderDataItem
     */
    'vatCalculated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'productName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'productCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'productSku'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'productOptions'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'productImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'productData'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderOrderDataItem
     */
    'shipmentInfoReference'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderOrderDataItem
     */
    'promotionGrn'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof OrderOrderDataItem
     */
    'productIsVirtual'?: boolean;
}
/**
 * 
 * @export
 * @interface OrderPayment
 */
export interface OrderPayment {
    /**
     * 
     * @type {string}
     * @memberof OrderPayment
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderPayment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderPayment
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderPayment
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {Array<OrderPaymentAmount>}
     * @memberof OrderPayment
     */
    'amounts'?: Array<OrderPaymentAmount>;
    /**
     * 
     * @type {PaymentCcInfo}
     * @memberof OrderPayment
     */
    'ccInfo'?: PaymentCcInfo;
    /**
     * 
     * @type {Array<OrderTransaction>}
     * @memberof OrderPayment
     */
    'transactions'?: Array<OrderTransaction>;
}
/**
 * 
 * @export
 * @interface OrderPaymentAmount
 */
export interface OrderPaymentAmount {
    /**
     * 
     * @type {OrderPaymentAmountCode}
     * @memberof OrderPaymentAmount
     */
    'code'?: OrderPaymentAmountCode;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderPaymentAmount
     */
    'value'?: OrderMoney;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderPaymentAmountCode = {
    Unknown: 'UNKNOWN',
    Canceled: 'CANCELED',
    Ordered: 'ORDERED',
    Paid: 'PAID',
    Refunded: 'REFUNDED',
    Authorized: 'AUTHORIZED'
} as const;

export type OrderPaymentAmountCode = typeof OrderPaymentAmountCode[keyof typeof OrderPaymentAmountCode];


/**
 * 
 * @export
 * @interface OrderPaymentFilter
 */
export interface OrderPaymentFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderPaymentFilter
     */
    'codes'?: Array<string>;
    /**
     * 
     * @type {OrderPaymentFilterCondition}
     * @memberof OrderPaymentFilter
     */
    'condition'?: OrderPaymentFilterCondition;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderPaymentFilterCondition = {
    In: 'IN',
    NotIn: 'NOT_IN'
} as const;

export type OrderPaymentFilterCondition = typeof OrderPaymentFilterCondition[keyof typeof OrderPaymentFilterCondition];


/**
 * Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains).  In typical usage an address would be created via user input or from importing existing data, depending on the type of process.  Advice on address input / editing:  - Use an i18n-ready address widget such as    https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of   fields outside countries where that field is used.  For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
 * @export
 * @interface OrderPostalAddress
 */
export interface OrderPostalAddress {
    /**
     * The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.  All new revisions **must** be backward compatible with old revisions.
     * @type {number}
     * @memberof OrderPostalAddress
     */
    'revision'?: number;
    /**
     * Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'regionCode'?: string;
    /**
     * Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address\' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).  Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'languageCode'?: string;
    /**
     * Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'postalCode'?: string;
    /**
     * Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d\'Ivoire).
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'sortingCode'?: string;
    /**
     * Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don\'t use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'administrativeArea'?: string;
    /**
     * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'locality'?: string;
    /**
     * Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'sublocality'?: string;
    /**
     * Unstructured address lines describing the lower levels of an address.  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
     * @type {Array<string>}
     * @memberof OrderPostalAddress
     */
    'addressLines'?: Array<string>;
    /**
     * Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.
     * @type {Array<string>}
     * @memberof OrderPostalAddress
     */
    'recipients'?: Array<string>;
    /**
     * Optional. The name of the organization at the address.
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'organization'?: string;
    /**
     * Optional.
     * @type {string}
     * @memberof OrderPostalAddress
     */
    'phoneNumber'?: string;
    /**
     * Optional.
     * @type {object}
     * @memberof OrderPostalAddress
     */
    'additionalInfo'?: object;
}
/**
 * 
 * @export
 * @interface OrderPrintOrdersLabelsRequest
 */
export interface OrderPrintOrdersLabelsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderPrintOrdersLabelsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderPrintOrdersLabelsRequest
     */
    'orderNumbers'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrderPrintOrdersLabelsResponse
 */
export interface OrderPrintOrdersLabelsResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderPrintOrdersLabelsResponse
     */
    'downloadUrl'?: string;
    /**
     * 
     * @type {Array<PrintOrdersLabelsResponseFailedOrder>}
     * @memberof OrderPrintOrdersLabelsResponse
     */
    'failedOrders'?: Array<PrintOrdersLabelsResponseFailedOrder>;
}
/**
 * 
 * @export
 * @interface OrderQuashFulfillmentRequest
 */
export interface OrderQuashFulfillmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderQuashFulfillmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderQuashFulfillmentRequest
     */
    'fulfillmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderQuashFulfillmentRequest
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface OrderQuashShipmentRequest
 */
export interface OrderQuashShipmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderQuashShipmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderQuashShipmentRequest
     */
    'shipmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderQuashShipmentRequest
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface OrderReceiveFulfillmentRequest
 */
export interface OrderReceiveFulfillmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderReceiveFulfillmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderReceiveFulfillmentRequest
     */
    'fulfillmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderRefund
 */
export interface OrderRefund {
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    'paymentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    'id'?: string;
    /**
     * 
     * @type {Array<OrderRefundItem>}
     * @memberof OrderRefund
     */
    'items'?: Array<OrderRefundItem>;
    /**
     * 
     * @type {Array<OrderRefundAmount>}
     * @memberof OrderRefund
     */
    'amounts'?: Array<OrderRefundAmount>;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderRefund
     */
    'transactionIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrderRefundAmount
 */
export interface OrderRefundAmount {
    /**
     * 
     * @type {OrderRefundAmountCode}
     * @memberof OrderRefundAmount
     */
    'code'?: OrderRefundAmountCode;
    /**
     * 
     * @type {OrderMoney}
     * @memberof OrderRefundAmount
     */
    'value'?: OrderMoney;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderRefundAmountCode = {
    Unknown: 'UNKNOWN',
    Ordered: 'ORDERED',
    Shipping: 'SHIPPING'
} as const;

export type OrderRefundAmountCode = typeof OrderRefundAmountCode[keyof typeof OrderRefundAmountCode];


/**
 * 
 * @export
 * @interface OrderRefundItem
 */
export interface OrderRefundItem {
    /**
     * 
     * @type {string}
     * @memberof OrderRefundItem
     */
    'orderItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderRefundItem
     */
    'qty'?: number;
}
/**
 * 
 * @export
 * @interface OrderReportFulfillmentErrorRequest
 */
export interface OrderReportFulfillmentErrorRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderReportFulfillmentErrorRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderReportFulfillmentErrorRequest
     */
    'fulfillmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderReportFulfillmentNotResolvableRequest
 */
export interface OrderReportFulfillmentNotResolvableRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderReportFulfillmentNotResolvableRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderReportFulfillmentNotResolvableRequest
     */
    'fulfillmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderReportFulfillmentReadyRequest
 */
export interface OrderReportFulfillmentReadyRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderReportFulfillmentReadyRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderReportFulfillmentReadyRequest
     */
    'fulfillmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderReportShipmentDeliveryRequest
 */
export interface OrderReportShipmentDeliveryRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderReportShipmentDeliveryRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderReportShipmentDeliveryRequest
     */
    'shipmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderReportShipmentMissingStockRequest
 */
export interface OrderReportShipmentMissingStockRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderReportShipmentMissingStockRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderReportShipmentMissingStockRequest
     */
    'shipmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderReportShipmentMissingStockRequest
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface OrderResolveShipmentMissingStockRequest
 */
export interface OrderResolveShipmentMissingStockRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderResolveShipmentMissingStockRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderResolveShipmentMissingStockRequest
     */
    'shipmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderRetryFulfillmentRequest
 */
export interface OrderRetryFulfillmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderRetryFulfillmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetryFulfillmentRequest
     */
    'fulfillmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderSearchOrdersRequest
 */
export interface OrderSearchOrdersRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderSearchOrdersRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderSearchOrdersRequest
     */
    'searchQuery'?: string;
    /**
     * The maximum number of orders to return. The service may return fewer than this value. If unspecified, at most 10 orders will be returned. The maximum value is 100; values above 100 will be coerced to 100.
     * @type {number}
     * @memberof OrderSearchOrdersRequest
     */
    'pageSize'?: number;
    /**
     * A page token, received from a previous `ListOrders` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListOrders` must match the call that provided the page token.
     * @type {string}
     * @memberof OrderSearchOrdersRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {Array<OrderOrderBy>}
     * @memberof OrderSearchOrdersRequest
     */
    'orderBy'?: Array<OrderOrderBy>;
    /**
     * 
     * @type {OrderStatusFilter}
     * @memberof OrderSearchOrdersRequest
     */
    'statusFilter'?: OrderStatusFilter;
    /**
     * 
     * @type {string}
     * @memberof OrderSearchOrdersRequest
     */
    'fromDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderSearchOrdersRequest
     */
    'toDate'?: string;
    /**
     * 
     * @type {OrderPaymentFilter}
     * @memberof OrderSearchOrdersRequest
     */
    'paymentFilter'?: OrderPaymentFilter;
}
/**
 * 
 * @export
 * @interface OrderSearchOrdersResponse
 */
export interface OrderSearchOrdersResponse {
    /**
     * 
     * @type {Array<OrderOrderData>}
     * @memberof OrderSearchOrdersResponse
     */
    'orders'?: Array<OrderOrderData>;
    /**
     * A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     * @type {string}
     * @memberof OrderSearchOrdersResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface OrderSendFulfillmentRequest
 */
export interface OrderSendFulfillmentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderSendFulfillmentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderSendFulfillmentRequest
     */
    'fulfillmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderSendOrderNotificationRequest
 */
export interface OrderSendOrderNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderSendOrderNotificationRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderSendOrderNotificationRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface OrderShipment
 */
export interface OrderShipment {
    /**
     * 
     * @type {string}
     * @memberof OrderShipment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShipment
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShipment
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShipment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShipment
     */
    'status'?: string;
    /**
     * 
     * @type {Array<OrderShipmentItem>}
     * @memberof OrderShipment
     */
    'items'?: Array<OrderShipmentItem>;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderShipment
     */
    'address'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderShipment
     */
    'fromAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof OrderShipment
     */
    'returnAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {Array<ShipmentTracking>}
     * @memberof OrderShipment
     */
    'tracking'?: Array<ShipmentTracking>;
    /**
     * 
     * @type {Array<ShipmentTracking>}
     * @memberof OrderShipment
     */
    'returnTracking'?: Array<ShipmentTracking>;
}
/**
 * 
 * @export
 * @interface OrderShipmentItem
 */
export interface OrderShipmentItem {
    /**
     * 
     * @type {string}
     * @memberof OrderShipmentItem
     */
    'orderItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderShipmentItem
     */
    'qty'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShipmentItem
     */
    'rowWeight'?: string;
}
/**
 * 
 * @export
 * @interface OrderStartFulfillmentProcessingRequest
 */
export interface OrderStartFulfillmentProcessingRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderStartFulfillmentProcessingRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderStartFulfillmentProcessingRequest
     */
    'fulfillmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderStartShipmentProcessingRequest
 */
export interface OrderStartShipmentProcessingRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderStartShipmentProcessingRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderStartShipmentProcessingRequest
     */
    'shipmentId'?: string;
}
/**
 * 
 * @export
 * @interface OrderStatusFilter
 */
export interface OrderStatusFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderStatusFilter
     */
    'statuses'?: Array<string>;
    /**
     * 
     * @type {OrderStatusFilterCondition}
     * @memberof OrderStatusFilter
     */
    'condition'?: OrderStatusFilterCondition;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderStatusFilterCondition = {
    In: 'IN',
    NotIn: 'NOT_IN'
} as const;

export type OrderStatusFilterCondition = typeof OrderStatusFilterCondition[keyof typeof OrderStatusFilterCondition];


/**
 * 
 * @export
 * @interface OrderTransaction
 */
export interface OrderTransaction {
    /**
     * 
     * @type {string}
     * @memberof OrderTransaction
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderTransaction
     */
    'paymentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderTransaction
     */
    'id'?: string;
    /**
     * 
     * @type {OrderTransactionType}
     * @memberof OrderTransaction
     */
    'type'?: OrderTransactionType;
    /**
     * 
     * @type {string}
     * @memberof OrderTransaction
     */
    'additionalInfo'?: string;
    /**
     * 
     * @type {Array<OrderTransaction>}
     * @memberof OrderTransaction
     */
    'childTransactions'?: Array<OrderTransaction>;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderTransactionType = {
    Unknown: 'UNKNOWN',
    Authorization: 'AUTHORIZATION',
    Capture: 'CAPTURE',
    Sale: 'SALE',
    Refund: 'REFUND',
    Void: 'VOID',
    Failed: 'FAILED',
    Pending: 'PENDING',
    Fraud: 'FRAUD'
} as const;

export type OrderTransactionType = typeof OrderTransactionType[keyof typeof OrderTransactionType];


/**
 * 
 * @export
 * @interface OrderUnholdOrderRequest
 */
export interface OrderUnholdOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderUnholdOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderUnholdOrderRequest
     */
    'orderId'?: string;
}
/**
 * 
 * @export
 * @interface OrderUpdateOrderRequest
 */
export interface OrderUpdateOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateOrderRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateOrderRequest
     */
    'id'?: string;
    /**
     * 
     * @type {UpdateOrderRequestPayload}
     * @memberof OrderUpdateOrderRequest
     */
    'payload'?: UpdateOrderRequestPayload;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderUpdateOrderRequest
     */
    'fieldMask'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrderUpdatePaymentRequest
 */
export interface OrderUpdatePaymentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderUpdatePaymentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdatePaymentRequest
     */
    'paymentId'?: string;
    /**
     * 
     * @type {PaymentCcInfo}
     * @memberof OrderUpdatePaymentRequest
     */
    'ccInfo'?: PaymentCcInfo;
}
/**
 * 
 * @export
 * @interface PaymentCcInfo
 */
export interface PaymentCcInfo {
    /**
     * 
     * @type {string}
     * @memberof PaymentCcInfo
     */
    'approval'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentCcInfo
     */
    'expMonth'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentCcInfo
     */
    'expYear'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCcInfo
     */
    'last4'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCcInfo
     */
    'numberEnc'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCcInfo
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCcInfo
     */
    'avsStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCcInfo
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PrintOrdersLabelsResponseFailedOrder
 */
export interface PrintOrdersLabelsResponseFailedOrder {
    /**
     * 
     * @type {string}
     * @memberof PrintOrdersLabelsResponseFailedOrder
     */
    'orderNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrintOrdersLabelsResponseFailedOrder
     */
    'errorMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrintOrdersLabelsResponseFailedOrder
     */
    'errorCode'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    'value'?: string;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the `Value` type union.   The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */

export const ProtobufNullValue = {
    NullValue: 'NULL_VALUE'
} as const;

export type ProtobufNullValue = typeof ProtobufNullValue[keyof typeof ProtobufNullValue];


/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface ShipmentTracking
 */
export interface ShipmentTracking {
    /**
     * 
     * @type {string}
     * @memberof ShipmentTracking
     */
    'carrierCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentTracking
     */
    'carrierTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentTracking
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentTracking
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentTracking
     */
    'labelUrl'?: string;
}
/**
 * 
 * @export
 * @interface UpdateOrderRequestPayload
 */
export interface UpdateOrderRequestPayload {
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof UpdateOrderRequestPayload
     */
    'billingAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {OrderPostalAddress}
     * @memberof UpdateOrderRequestPayload
     */
    'shippingAddress'?: OrderPostalAddress;
    /**
     * 
     * @type {object}
     * @memberof UpdateOrderRequestPayload
     */
    'additionalInfo'?: object;
}

/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve Order
         * @param {OrderApproveOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveOrder: async (body: OrderApproveOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('approveOrder', 'body', body)
            const localVarPath = `/order.Order/ApproveOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign Shipment
         * @param {OrderAssignShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignShipment: async (body: OrderAssignShipmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('assignShipment', 'body', body)
            const localVarPath = `/order.Order/AssignShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Calculate Refund
         * @param {OrderCalculateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateRefund: async (body: OrderCalculateRefundRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('calculateRefund', 'body', body)
            const localVarPath = `/order.Order/CalculateRefund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Fulfillment
         * @param {OrderCancelFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFulfillment: async (body: OrderCancelFulfillmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cancelFulfillment', 'body', body)
            const localVarPath = `/order.Order/CancelFulfillment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Order
         * @param {OrderCancelOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: async (body: OrderCancelOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cancelOrder', 'body', body)
            const localVarPath = `/order.Order/CancelOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Shipment
         * @param {OrderCancelShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment: async (body: OrderCancelShipmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cancelShipment', 'body', body)
            const localVarPath = `/order.Order/CancelShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete Shipment Packing
         * @param {OrderCompleteShipmentPackingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeShipmentPacking: async (body: OrderCompleteShipmentPackingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('completeShipmentPacking', 'body', body)
            const localVarPath = `/order.Order/CompleteShipmentPacking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Fulfillment
         * @param {OrderCreateFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillment: async (body: OrderCreateFulfillmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createFulfillment', 'body', body)
            const localVarPath = `/order.Order/CreateFulfillment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Order
         * @param {OrderCreateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (body: OrderCreateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createOrder', 'body', body)
            const localVarPath = `/order.Order/CreateOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Order History
         * @param {OrderCreateHistoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderHistory: async (body: OrderCreateHistoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createOrderHistory', 'body', body)
            const localVarPath = `/order.Order/CreateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Payment
         * @param {OrderCreatePaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: async (body: OrderCreatePaymentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPayment', 'body', body)
            const localVarPath = `/order.Order/CreatePayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Payment Transaction
         * @param {OrderCreatePaymentTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentTransaction: async (body: OrderCreatePaymentTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPaymentTransaction', 'body', body)
            const localVarPath = `/order.Order/CreatePaymentTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Refund
         * @param {OrderCreateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: async (body: OrderCreateRefundRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createRefund', 'body', body)
            const localVarPath = `/order.Order/CreateRefund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Refund Transaction
         * @param {OrderCreateRefundTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefundTransaction: async (body: OrderCreateRefundTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createRefundTransaction', 'body', body)
            const localVarPath = `/order.Order/CreateRefundTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Shipment
         * @param {OrderCreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipment: async (body: OrderCreateShipmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createShipment', 'body', body)
            const localVarPath = `/order.Order/CreateShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Order
         * @param {OrderDeleteOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: async (body: OrderDeleteOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deleteOrder', 'body', body)
            const localVarPath = `/order.Order/DeleteOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Fulfillment
         * @param {OrderGetFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillment: async (body: OrderGetFulfillmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getFulfillment', 'body', body)
            const localVarPath = `/order.Order/GetFulfillment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Order
         * @param {OrderGetOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (body: OrderGetOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getOrder', 'body', body)
            const localVarPath = `/order.Order/GetOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Order by Cart ID
         * @param {OrderGetOrderByCartIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByCartId: async (body: OrderGetOrderByCartIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getOrderByCartId', 'body', body)
            const localVarPath = `/order.Order/GetOrderByCartId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Order by Order Number
         * @param {OrderGetOrderByOrderNumberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByOrderNumber: async (body: OrderGetOrderByOrderNumberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getOrderByOrderNumber', 'body', body)
            const localVarPath = `/order.Order/GetOrderByOrderNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Payment
         * @param {OrderGetPaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: async (body: OrderGetPaymentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getPayment', 'body', body)
            const localVarPath = `/order.Order/GetPayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Shipment
         * @param {OrderGetShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment: async (body: OrderGetShipmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getShipment', 'body', body)
            const localVarPath = `/order.Order/GetShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Transaction
         * @param {OrderGetTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction: async (body: OrderGetTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getTransaction', 'body', body)
            const localVarPath = `/order.Order/GetTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hold Order
         * @param {OrderHoldOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        holdOrder: async (body: OrderHoldOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('holdOrder', 'body', body)
            const localVarPath = `/order.Order/HoldOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import Order
         * @param {OrderImportOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importOrder: async (body: OrderImportOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('importOrder', 'body', body)
            const localVarPath = `/order.Order/ImportOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Fulfillments
         * @param {OrderListFulfillmentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillments: async (body: OrderListFulfillmentsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listFulfillments', 'body', body)
            const localVarPath = `/order.Order/ListFulfillments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Orders
         * @param {OrderListOrdersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: async (body: OrderListOrdersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listOrders', 'body', body)
            const localVarPath = `/order.Order/ListOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Orders by Customer
         * @param {OrderListOrdersByCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrdersByCustomer: async (body: OrderListOrdersByCustomerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listOrdersByCustomer', 'body', body)
            const localVarPath = `/order.Order/ListOrdersByCustomer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Orders by Numbers
         * @param {OrderListOrdersByNumbersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrdersByNumbers: async (body: OrderListOrdersByNumbersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listOrdersByNumbers', 'body', body)
            const localVarPath = `/order.Order/ListOrdersByNumbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Shipments
         * @param {OrderListShipmentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipments: async (body: OrderListShipmentsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listShipments', 'body', body)
            const localVarPath = `/order.Order/ListShipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Print Orders Labels
         * @param {OrderPrintOrdersLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printOrdersLabels: async (body: OrderPrintOrdersLabelsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('printOrdersLabels', 'body', body)
            const localVarPath = `/order.Order/PrintOrdersLabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Quash Fulfillment
         * @param {OrderQuashFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quashFulfillment: async (body: OrderQuashFulfillmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('quashFulfillment', 'body', body)
            const localVarPath = `/order.Order/QuashFulfillment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Quash Shipment
         * @param {OrderQuashShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quashShipment: async (body: OrderQuashShipmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('quashShipment', 'body', body)
            const localVarPath = `/order.Order/QuashShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive Fulfillment
         * @param {OrderReceiveFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveFulfillment: async (body: OrderReceiveFulfillmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('receiveFulfillment', 'body', body)
            const localVarPath = `/order.Order/ReceiveFulfillment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report Fulfillment Error
         * @param {OrderReportFulfillmentErrorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportFulfillmentError: async (body: OrderReportFulfillmentErrorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reportFulfillmentError', 'body', body)
            const localVarPath = `/order.Order/ReportFulfillmentError`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report Fulfillment Not Resolvable
         * @param {OrderReportFulfillmentNotResolvableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportFulfillmentNotResolvable: async (body: OrderReportFulfillmentNotResolvableRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reportFulfillmentNotResolvable', 'body', body)
            const localVarPath = `/order.Order/ReportFulfillmentNotResolvable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report Fulfillment Ready
         * @param {OrderReportFulfillmentReadyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportFulfillmentReady: async (body: OrderReportFulfillmentReadyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reportFulfillmentReady', 'body', body)
            const localVarPath = `/order.Order/ReportFulfillmentReady`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report Shipment Delivery
         * @param {OrderReportShipmentDeliveryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportShipmentDelivery: async (body: OrderReportShipmentDeliveryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reportShipmentDelivery', 'body', body)
            const localVarPath = `/order.Order/ReportShipmentDelivery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report Shipment Missing Stock
         * @param {OrderReportShipmentMissingStockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportShipmentMissingStock: async (body: OrderReportShipmentMissingStockRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reportShipmentMissingStock', 'body', body)
            const localVarPath = `/order.Order/ReportShipmentMissingStock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resolve Shipment Missing Stock
         * @param {OrderResolveShipmentMissingStockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveShipmentMissingStock: async (body: OrderResolveShipmentMissingStockRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('resolveShipmentMissingStock', 'body', body)
            const localVarPath = `/order.Order/ResolveShipmentMissingStock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retry Fulfillment
         * @param {OrderRetryFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryFulfillment: async (body: OrderRetryFulfillmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('retryFulfillment', 'body', body)
            const localVarPath = `/order.Order/RetryFulfillment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Orders
         * @param {OrderSearchOrdersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrders: async (body: OrderSearchOrdersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('searchOrders', 'body', body)
            const localVarPath = `/order.Order/SearchOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Fulfillment
         * @param {OrderSendFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFulfillment: async (body: OrderSendFulfillmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sendFulfillment', 'body', body)
            const localVarPath = `/order.Order/SendFulfillment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Order Notification
         * @param {OrderSendOrderNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOrderNotification: async (body: OrderSendOrderNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sendOrderNotification', 'body', body)
            const localVarPath = `/order.Order/SendOrderNotification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Fulfillment Processing
         * @param {OrderStartFulfillmentProcessingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startFulfillmentProcessing: async (body: OrderStartFulfillmentProcessingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('startFulfillmentProcessing', 'body', body)
            const localVarPath = `/order.Order/StartFulfillmentProcessing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Shipment Processing
         * @param {OrderStartShipmentProcessingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startShipmentProcessing: async (body: OrderStartShipmentProcessingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('startShipmentProcessing', 'body', body)
            const localVarPath = `/order.Order/StartShipmentProcessing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unhold Order
         * @param {OrderUnholdOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unholdOrder: async (body: OrderUnholdOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('unholdOrder', 'body', body)
            const localVarPath = `/order.Order/UnholdOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Order
         * @param {OrderUpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (body: OrderUpdateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateOrder', 'body', body)
            const localVarPath = `/order.Order/UpdateOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Payment
         * @param {OrderUpdatePaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayment: async (body: OrderUpdatePaymentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePayment', 'body', body)
            const localVarPath = `/order.Order/UpdatePayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approve Order
         * @param {OrderApproveOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveOrder(body: OrderApproveOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.approveOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Assign Shipment
         * @param {OrderAssignShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignShipment(body: OrderAssignShipmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignShipment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.assignShipment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Calculate Refund
         * @param {OrderCalculateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateRefund(body: OrderCalculateRefundRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderCalculateRefundResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateRefund(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.calculateRefund']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel Fulfillment
         * @param {OrderCancelFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelFulfillment(body: OrderCancelFulfillmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelFulfillment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.cancelFulfillment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel Order
         * @param {OrderCancelOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrder(body: OrderCancelOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.cancelOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel Shipment
         * @param {OrderCancelShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelShipment(body: OrderCancelShipmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelShipment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.cancelShipment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Complete Shipment Packing
         * @param {OrderCompleteShipmentPackingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeShipmentPacking(body: OrderCompleteShipmentPackingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeShipmentPacking(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.completeShipmentPacking']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Fulfillment
         * @param {OrderCreateFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFulfillment(body: OrderCreateFulfillmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderFulfillment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFulfillment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.createFulfillment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Order
         * @param {OrderCreateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(body: OrderCreateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderOrderData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.createOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Order History
         * @param {OrderCreateHistoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrderHistory(body: OrderCreateHistoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDataHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrderHistory(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.createOrderHistory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Payment
         * @param {OrderCreatePaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayment(body: OrderCreatePaymentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.createPayment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Payment Transaction
         * @param {OrderCreatePaymentTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentTransaction(body: OrderCreatePaymentTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentTransaction(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.createPaymentTransaction']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Refund
         * @param {OrderCreateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRefund(body: OrderCreateRefundRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderRefund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRefund(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.createRefund']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Refund Transaction
         * @param {OrderCreateRefundTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRefundTransaction(body: OrderCreateRefundTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRefundTransaction(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.createRefundTransaction']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Shipment
         * @param {OrderCreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShipment(body: OrderCreateShipmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShipment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.createShipment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Order
         * @param {OrderDeleteOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrder(body: OrderDeleteOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.deleteOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Fulfillment
         * @param {OrderGetFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFulfillment(body: OrderGetFulfillmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderFulfillment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFulfillment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getFulfillment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Order
         * @param {OrderGetOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(body: OrderGetOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderOrderData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Order by Cart ID
         * @param {OrderGetOrderByCartIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderByCartId(body: OrderGetOrderByCartIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderOrderData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderByCartId(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getOrderByCartId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Order by Order Number
         * @param {OrderGetOrderByOrderNumberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderByOrderNumber(body: OrderGetOrderByOrderNumberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderOrderData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderByOrderNumber(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getOrderByOrderNumber']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Payment
         * @param {OrderGetPaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayment(body: OrderGetPaymentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getPayment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Shipment
         * @param {OrderGetShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipment(body: OrderGetShipmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getShipment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Transaction
         * @param {OrderGetTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(body: OrderGetTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransaction(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getTransaction']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Hold Order
         * @param {OrderHoldOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async holdOrder(body: OrderHoldOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.holdOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.holdOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Import Order
         * @param {OrderImportOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importOrder(body: OrderImportOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderOrderData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.importOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Fulfillments
         * @param {OrderListFulfillmentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFulfillments(body: OrderListFulfillmentsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderListFulfillmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFulfillments(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.listFulfillments']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Orders
         * @param {OrderListOrdersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrders(body: OrderListOrdersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderListOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrders(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.listOrders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Orders by Customer
         * @param {OrderListOrdersByCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrdersByCustomer(body: OrderListOrdersByCustomerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderListOrdersByCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrdersByCustomer(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.listOrdersByCustomer']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Orders by Numbers
         * @param {OrderListOrdersByNumbersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrdersByNumbers(body: OrderListOrdersByNumbersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderListOrdersByNumbersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrdersByNumbers(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.listOrdersByNumbers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Shipments
         * @param {OrderListShipmentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipments(body: OrderListShipmentsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderListShipmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipments(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.listShipments']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Print Orders Labels
         * @param {OrderPrintOrdersLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async printOrdersLabels(body: OrderPrintOrdersLabelsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPrintOrdersLabelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.printOrdersLabels(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.printOrdersLabels']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Quash Fulfillment
         * @param {OrderQuashFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quashFulfillment(body: OrderQuashFulfillmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quashFulfillment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.quashFulfillment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Quash Shipment
         * @param {OrderQuashShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quashShipment(body: OrderQuashShipmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quashShipment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.quashShipment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Receive Fulfillment
         * @param {OrderReceiveFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receiveFulfillment(body: OrderReceiveFulfillmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receiveFulfillment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.receiveFulfillment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Report Fulfillment Error
         * @param {OrderReportFulfillmentErrorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportFulfillmentError(body: OrderReportFulfillmentErrorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportFulfillmentError(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.reportFulfillmentError']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Report Fulfillment Not Resolvable
         * @param {OrderReportFulfillmentNotResolvableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportFulfillmentNotResolvable(body: OrderReportFulfillmentNotResolvableRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportFulfillmentNotResolvable(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.reportFulfillmentNotResolvable']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Report Fulfillment Ready
         * @param {OrderReportFulfillmentReadyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportFulfillmentReady(body: OrderReportFulfillmentReadyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportFulfillmentReady(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.reportFulfillmentReady']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Report Shipment Delivery
         * @param {OrderReportShipmentDeliveryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportShipmentDelivery(body: OrderReportShipmentDeliveryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportShipmentDelivery(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.reportShipmentDelivery']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Report Shipment Missing Stock
         * @param {OrderReportShipmentMissingStockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportShipmentMissingStock(body: OrderReportShipmentMissingStockRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportShipmentMissingStock(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.reportShipmentMissingStock']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Resolve Shipment Missing Stock
         * @param {OrderResolveShipmentMissingStockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveShipmentMissingStock(body: OrderResolveShipmentMissingStockRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveShipmentMissingStock(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.resolveShipmentMissingStock']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Retry Fulfillment
         * @param {OrderRetryFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retryFulfillment(body: OrderRetryFulfillmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retryFulfillment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.retryFulfillment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Search Orders
         * @param {OrderSearchOrdersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchOrders(body: OrderSearchOrdersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSearchOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchOrders(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.searchOrders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Send Fulfillment
         * @param {OrderSendFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendFulfillment(body: OrderSendFulfillmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendFulfillment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.sendFulfillment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Send Order Notification
         * @param {OrderSendOrderNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendOrderNotification(body: OrderSendOrderNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendOrderNotification(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.sendOrderNotification']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Start Fulfillment Processing
         * @param {OrderStartFulfillmentProcessingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startFulfillmentProcessing(body: OrderStartFulfillmentProcessingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startFulfillmentProcessing(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.startFulfillmentProcessing']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Start Shipment Processing
         * @param {OrderStartShipmentProcessingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startShipmentProcessing(body: OrderStartShipmentProcessingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startShipmentProcessing(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.startShipmentProcessing']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Unhold Order
         * @param {OrderUnholdOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unholdOrder(body: OrderUnholdOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unholdOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.unholdOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Order
         * @param {OrderUpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(body: OrderUpdateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderOrderData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.updateOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Payment
         * @param {OrderUpdatePaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayment(body: OrderUpdatePaymentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayment(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.updatePayment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @summary Approve Order
         * @param {OrderApproveOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveOrder(body: OrderApproveOrderRequest, options?: any): AxiosPromise<object> {
            return localVarFp.approveOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign Shipment
         * @param {OrderAssignShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignShipment(body: OrderAssignShipmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.assignShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Calculate Refund
         * @param {OrderCalculateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateRefund(body: OrderCalculateRefundRequest, options?: any): AxiosPromise<OrderCalculateRefundResponse> {
            return localVarFp.calculateRefund(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Fulfillment
         * @param {OrderCancelFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFulfillment(body: OrderCancelFulfillmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.cancelFulfillment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Order
         * @param {OrderCancelOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(body: OrderCancelOrderRequest, options?: any): AxiosPromise<object> {
            return localVarFp.cancelOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Shipment
         * @param {OrderCancelShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment(body: OrderCancelShipmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.cancelShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete Shipment Packing
         * @param {OrderCompleteShipmentPackingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeShipmentPacking(body: OrderCompleteShipmentPackingRequest, options?: any): AxiosPromise<object> {
            return localVarFp.completeShipmentPacking(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Fulfillment
         * @param {OrderCreateFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillment(body: OrderCreateFulfillmentRequest, options?: any): AxiosPromise<OrderFulfillment> {
            return localVarFp.createFulfillment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Order
         * @param {OrderCreateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: OrderCreateOrderRequest, options?: any): AxiosPromise<OrderOrderData> {
            return localVarFp.createOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Order History
         * @param {OrderCreateHistoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderHistory(body: OrderCreateHistoryRequest, options?: any): AxiosPromise<OrderDataHistory> {
            return localVarFp.createOrderHistory(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Payment
         * @param {OrderCreatePaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment(body: OrderCreatePaymentRequest, options?: any): AxiosPromise<OrderPayment> {
            return localVarFp.createPayment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Payment Transaction
         * @param {OrderCreatePaymentTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentTransaction(body: OrderCreatePaymentTransactionRequest, options?: any): AxiosPromise<OrderTransaction> {
            return localVarFp.createPaymentTransaction(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Refund
         * @param {OrderCreateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund(body: OrderCreateRefundRequest, options?: any): AxiosPromise<OrderRefund> {
            return localVarFp.createRefund(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Refund Transaction
         * @param {OrderCreateRefundTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefundTransaction(body: OrderCreateRefundTransactionRequest, options?: any): AxiosPromise<OrderTransaction> {
            return localVarFp.createRefundTransaction(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Shipment
         * @param {OrderCreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipment(body: OrderCreateShipmentRequest, options?: any): AxiosPromise<OrderShipment> {
            return localVarFp.createShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Order
         * @param {OrderDeleteOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(body: OrderDeleteOrderRequest, options?: any): AxiosPromise<object> {
            return localVarFp.deleteOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Fulfillment
         * @param {OrderGetFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillment(body: OrderGetFulfillmentRequest, options?: any): AxiosPromise<OrderFulfillment> {
            return localVarFp.getFulfillment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Order
         * @param {OrderGetOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(body: OrderGetOrderRequest, options?: any): AxiosPromise<OrderOrderData> {
            return localVarFp.getOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Order by Cart ID
         * @param {OrderGetOrderByCartIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByCartId(body: OrderGetOrderByCartIdRequest, options?: any): AxiosPromise<OrderOrderData> {
            return localVarFp.getOrderByCartId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Order by Order Number
         * @param {OrderGetOrderByOrderNumberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByOrderNumber(body: OrderGetOrderByOrderNumberRequest, options?: any): AxiosPromise<OrderOrderData> {
            return localVarFp.getOrderByOrderNumber(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Payment
         * @param {OrderGetPaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment(body: OrderGetPaymentRequest, options?: any): AxiosPromise<OrderPayment> {
            return localVarFp.getPayment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Shipment
         * @param {OrderGetShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment(body: OrderGetShipmentRequest, options?: any): AxiosPromise<OrderShipment> {
            return localVarFp.getShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Transaction
         * @param {OrderGetTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(body: OrderGetTransactionRequest, options?: any): AxiosPromise<OrderTransaction> {
            return localVarFp.getTransaction(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hold Order
         * @param {OrderHoldOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        holdOrder(body: OrderHoldOrderRequest, options?: any): AxiosPromise<object> {
            return localVarFp.holdOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import Order
         * @param {OrderImportOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importOrder(body: OrderImportOrderRequest, options?: any): AxiosPromise<OrderOrderData> {
            return localVarFp.importOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Fulfillments
         * @param {OrderListFulfillmentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillments(body: OrderListFulfillmentsRequest, options?: any): AxiosPromise<OrderListFulfillmentsResponse> {
            return localVarFp.listFulfillments(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Orders
         * @param {OrderListOrdersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(body: OrderListOrdersRequest, options?: any): AxiosPromise<OrderListOrdersResponse> {
            return localVarFp.listOrders(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Orders by Customer
         * @param {OrderListOrdersByCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrdersByCustomer(body: OrderListOrdersByCustomerRequest, options?: any): AxiosPromise<OrderListOrdersByCustomerResponse> {
            return localVarFp.listOrdersByCustomer(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Orders by Numbers
         * @param {OrderListOrdersByNumbersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrdersByNumbers(body: OrderListOrdersByNumbersRequest, options?: any): AxiosPromise<OrderListOrdersByNumbersResponse> {
            return localVarFp.listOrdersByNumbers(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Shipments
         * @param {OrderListShipmentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipments(body: OrderListShipmentsRequest, options?: any): AxiosPromise<OrderListShipmentsResponse> {
            return localVarFp.listShipments(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Print Orders Labels
         * @param {OrderPrintOrdersLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printOrdersLabels(body: OrderPrintOrdersLabelsRequest, options?: any): AxiosPromise<OrderPrintOrdersLabelsResponse> {
            return localVarFp.printOrdersLabels(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Quash Fulfillment
         * @param {OrderQuashFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quashFulfillment(body: OrderQuashFulfillmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.quashFulfillment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Quash Shipment
         * @param {OrderQuashShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quashShipment(body: OrderQuashShipmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.quashShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Receive Fulfillment
         * @param {OrderReceiveFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveFulfillment(body: OrderReceiveFulfillmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.receiveFulfillment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report Fulfillment Error
         * @param {OrderReportFulfillmentErrorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportFulfillmentError(body: OrderReportFulfillmentErrorRequest, options?: any): AxiosPromise<object> {
            return localVarFp.reportFulfillmentError(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report Fulfillment Not Resolvable
         * @param {OrderReportFulfillmentNotResolvableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportFulfillmentNotResolvable(body: OrderReportFulfillmentNotResolvableRequest, options?: any): AxiosPromise<object> {
            return localVarFp.reportFulfillmentNotResolvable(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report Fulfillment Ready
         * @param {OrderReportFulfillmentReadyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportFulfillmentReady(body: OrderReportFulfillmentReadyRequest, options?: any): AxiosPromise<object> {
            return localVarFp.reportFulfillmentReady(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report Shipment Delivery
         * @param {OrderReportShipmentDeliveryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportShipmentDelivery(body: OrderReportShipmentDeliveryRequest, options?: any): AxiosPromise<object> {
            return localVarFp.reportShipmentDelivery(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report Shipment Missing Stock
         * @param {OrderReportShipmentMissingStockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportShipmentMissingStock(body: OrderReportShipmentMissingStockRequest, options?: any): AxiosPromise<object> {
            return localVarFp.reportShipmentMissingStock(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resolve Shipment Missing Stock
         * @param {OrderResolveShipmentMissingStockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveShipmentMissingStock(body: OrderResolveShipmentMissingStockRequest, options?: any): AxiosPromise<object> {
            return localVarFp.resolveShipmentMissingStock(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retry Fulfillment
         * @param {OrderRetryFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryFulfillment(body: OrderRetryFulfillmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.retryFulfillment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Orders
         * @param {OrderSearchOrdersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrders(body: OrderSearchOrdersRequest, options?: any): AxiosPromise<OrderSearchOrdersResponse> {
            return localVarFp.searchOrders(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Fulfillment
         * @param {OrderSendFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFulfillment(body: OrderSendFulfillmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.sendFulfillment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Order Notification
         * @param {OrderSendOrderNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOrderNotification(body: OrderSendOrderNotificationRequest, options?: any): AxiosPromise<object> {
            return localVarFp.sendOrderNotification(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Fulfillment Processing
         * @param {OrderStartFulfillmentProcessingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startFulfillmentProcessing(body: OrderStartFulfillmentProcessingRequest, options?: any): AxiosPromise<object> {
            return localVarFp.startFulfillmentProcessing(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Shipment Processing
         * @param {OrderStartShipmentProcessingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startShipmentProcessing(body: OrderStartShipmentProcessingRequest, options?: any): AxiosPromise<object> {
            return localVarFp.startShipmentProcessing(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unhold Order
         * @param {OrderUnholdOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unholdOrder(body: OrderUnholdOrderRequest, options?: any): AxiosPromise<object> {
            return localVarFp.unholdOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Order
         * @param {OrderUpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(body: OrderUpdateOrderRequest, options?: any): AxiosPromise<OrderOrderData> {
            return localVarFp.updateOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Payment
         * @param {OrderUpdatePaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayment(body: OrderUpdatePaymentRequest, options?: any): AxiosPromise<OrderPayment> {
            return localVarFp.updatePayment(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @summary Approve Order
     * @param {OrderApproveOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public approveOrder(body: OrderApproveOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).approveOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign Shipment
     * @param {OrderAssignShipmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public assignShipment(body: OrderAssignShipmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).assignShipment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Calculate Refund
     * @param {OrderCalculateRefundRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public calculateRefund(body: OrderCalculateRefundRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).calculateRefund(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Fulfillment
     * @param {OrderCancelFulfillmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public cancelFulfillment(body: OrderCancelFulfillmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).cancelFulfillment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Order
     * @param {OrderCancelOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public cancelOrder(body: OrderCancelOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).cancelOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Shipment
     * @param {OrderCancelShipmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public cancelShipment(body: OrderCancelShipmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).cancelShipment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Complete Shipment Packing
     * @param {OrderCompleteShipmentPackingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public completeShipmentPacking(body: OrderCompleteShipmentPackingRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).completeShipmentPacking(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Fulfillment
     * @param {OrderCreateFulfillmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createFulfillment(body: OrderCreateFulfillmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).createFulfillment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Order
     * @param {OrderCreateOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createOrder(body: OrderCreateOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).createOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Order History
     * @param {OrderCreateHistoryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createOrderHistory(body: OrderCreateHistoryRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).createOrderHistory(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Payment
     * @param {OrderCreatePaymentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createPayment(body: OrderCreatePaymentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).createPayment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Payment Transaction
     * @param {OrderCreatePaymentTransactionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createPaymentTransaction(body: OrderCreatePaymentTransactionRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).createPaymentTransaction(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Refund
     * @param {OrderCreateRefundRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createRefund(body: OrderCreateRefundRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).createRefund(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Refund Transaction
     * @param {OrderCreateRefundTransactionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createRefundTransaction(body: OrderCreateRefundTransactionRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).createRefundTransaction(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Shipment
     * @param {OrderCreateShipmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createShipment(body: OrderCreateShipmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).createShipment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Order
     * @param {OrderDeleteOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public deleteOrder(body: OrderDeleteOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).deleteOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Fulfillment
     * @param {OrderGetFulfillmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getFulfillment(body: OrderGetFulfillmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).getFulfillment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Order
     * @param {OrderGetOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrder(body: OrderGetOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).getOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Order by Cart ID
     * @param {OrderGetOrderByCartIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderByCartId(body: OrderGetOrderByCartIdRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).getOrderByCartId(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Order by Order Number
     * @param {OrderGetOrderByOrderNumberRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderByOrderNumber(body: OrderGetOrderByOrderNumberRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).getOrderByOrderNumber(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Payment
     * @param {OrderGetPaymentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getPayment(body: OrderGetPaymentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).getPayment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Shipment
     * @param {OrderGetShipmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getShipment(body: OrderGetShipmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).getShipment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Transaction
     * @param {OrderGetTransactionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getTransaction(body: OrderGetTransactionRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).getTransaction(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hold Order
     * @param {OrderHoldOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public holdOrder(body: OrderHoldOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).holdOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import Order
     * @param {OrderImportOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public importOrder(body: OrderImportOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).importOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Fulfillments
     * @param {OrderListFulfillmentsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public listFulfillments(body: OrderListFulfillmentsRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).listFulfillments(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Orders
     * @param {OrderListOrdersRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public listOrders(body: OrderListOrdersRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).listOrders(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Orders by Customer
     * @param {OrderListOrdersByCustomerRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public listOrdersByCustomer(body: OrderListOrdersByCustomerRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).listOrdersByCustomer(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Orders by Numbers
     * @param {OrderListOrdersByNumbersRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public listOrdersByNumbers(body: OrderListOrdersByNumbersRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).listOrdersByNumbers(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Shipments
     * @param {OrderListShipmentsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public listShipments(body: OrderListShipmentsRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).listShipments(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Print Orders Labels
     * @param {OrderPrintOrdersLabelsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public printOrdersLabels(body: OrderPrintOrdersLabelsRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).printOrdersLabels(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Quash Fulfillment
     * @param {OrderQuashFulfillmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public quashFulfillment(body: OrderQuashFulfillmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).quashFulfillment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Quash Shipment
     * @param {OrderQuashShipmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public quashShipment(body: OrderQuashShipmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).quashShipment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Receive Fulfillment
     * @param {OrderReceiveFulfillmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public receiveFulfillment(body: OrderReceiveFulfillmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).receiveFulfillment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report Fulfillment Error
     * @param {OrderReportFulfillmentErrorRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public reportFulfillmentError(body: OrderReportFulfillmentErrorRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).reportFulfillmentError(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report Fulfillment Not Resolvable
     * @param {OrderReportFulfillmentNotResolvableRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public reportFulfillmentNotResolvable(body: OrderReportFulfillmentNotResolvableRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).reportFulfillmentNotResolvable(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report Fulfillment Ready
     * @param {OrderReportFulfillmentReadyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public reportFulfillmentReady(body: OrderReportFulfillmentReadyRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).reportFulfillmentReady(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report Shipment Delivery
     * @param {OrderReportShipmentDeliveryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public reportShipmentDelivery(body: OrderReportShipmentDeliveryRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).reportShipmentDelivery(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report Shipment Missing Stock
     * @param {OrderReportShipmentMissingStockRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public reportShipmentMissingStock(body: OrderReportShipmentMissingStockRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).reportShipmentMissingStock(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resolve Shipment Missing Stock
     * @param {OrderResolveShipmentMissingStockRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public resolveShipmentMissingStock(body: OrderResolveShipmentMissingStockRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).resolveShipmentMissingStock(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retry Fulfillment
     * @param {OrderRetryFulfillmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public retryFulfillment(body: OrderRetryFulfillmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).retryFulfillment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Orders
     * @param {OrderSearchOrdersRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public searchOrders(body: OrderSearchOrdersRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).searchOrders(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Fulfillment
     * @param {OrderSendFulfillmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public sendFulfillment(body: OrderSendFulfillmentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).sendFulfillment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Order Notification
     * @param {OrderSendOrderNotificationRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public sendOrderNotification(body: OrderSendOrderNotificationRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).sendOrderNotification(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Fulfillment Processing
     * @param {OrderStartFulfillmentProcessingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public startFulfillmentProcessing(body: OrderStartFulfillmentProcessingRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).startFulfillmentProcessing(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Shipment Processing
     * @param {OrderStartShipmentProcessingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public startShipmentProcessing(body: OrderStartShipmentProcessingRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).startShipmentProcessing(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unhold Order
     * @param {OrderUnholdOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public unholdOrder(body: OrderUnholdOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).unholdOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Order
     * @param {OrderUpdateOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public updateOrder(body: OrderUpdateOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).updateOrder(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Payment
     * @param {OrderUpdatePaymentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public updatePayment(body: OrderUpdatePaymentRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).updatePayment(body, options).then((request) => request(this.axios, this.basePath));
    }
}



